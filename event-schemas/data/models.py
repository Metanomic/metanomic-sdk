# generated by datamodel-codegen:
#   filename:  asyncapi.yaml

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Type(Enum):
    AdStarted = 'AdStarted'
    AdOpened = 'AdOpened'
    AdPlaying = 'AdPlaying'
    AdStoped = 'AdStoped'
    AdSkipped = 'AdSkipped'
    Conversion = 'Conversion'
    AdCompleted = 'AdCompleted'
    AdStop = 'AdStop'
    AdClosed = 'AdClosed'
    AdImpression = 'AdImpression'
    AdExposure = 'AdExposure'
    AdReward = 'AdReward'


class App(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    build: Optional[str] = None
    namespace: Optional[str] = None


class Campaign(BaseModel):
    name: Optional[str] = None
    affiliate: Optional[str] = None
    provider: Optional[str] = None
    source: Optional[str] = None
    medium: Optional[str] = None
    term: Optional[str] = None
    contentId: Optional[str] = None
    contentType: Optional[str] = None
    creativeUri: Optional[str] = None
    marketingTactic: Optional[str] = None
    group: Optional[str] = None
    uri: Optional[str] = None
    eCPM: Optional[float] = None
    idfv: Optional[str] = None


class Screen(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None
    density: Optional[float] = None


class Location(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    continent: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed: Optional[float] = None


class Device(BaseModel):
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    fullScreen: Optional[bool] = None
    adTrackingEnabled: Optional[bool] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    name: Optional[str] = None
    osName: Optional[str] = None
    osType: Optional[str] = None
    osVersion: Optional[str] = None
    jailbroken: Optional[bool] = None
    token: Optional[str] = None
    ip: Optional[str] = None
    userAgent: Optional[str] = None
    engine: Optional[str] = None
    engineVersion: Optional[str] = None
    client: Optional[str] = None
    locale: Optional[str] = None
    bluetooth: Optional[bool] = None
    carrier: Optional[str] = None
    cellular: Optional[bool] = None
    wifi: Optional[bool] = None
    screen: Optional[Screen] = Field(
        None,
        description='The Device Screen. The Device Specific Screen properties',
        title='screen',
    )
    location: Optional[Location] = Field(
        None,
        description='The Device Location. The Device Location meta context',
        title='location',
    )


class Source(BaseModel):
    worldId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    realmId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    serverId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    shardId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    method: Optional[str] = None
    path: Optional[str] = None
    referrer: Optional[str] = None
    search: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    environment: Optional[str] = None


class Experiment(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    group: Optional[str] = None
    variation: Optional[str] = None
    uri: Optional[str] = None


class Session(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    theme: Optional[str] = None
    genre: Optional[str] = None
    level: Optional[float] = None
    progress: Optional[float] = None
    difficulty: Optional[float] = None


class Profile(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class TargetProfile(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class Map(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    level: Optional[float] = None
    position: Optional[float] = None


class SourceContext(BaseModel):
    app: Optional[App] = Field(
        None,
        description='The App Context. The App Specific Meta Context',
        title='AppContext',
    )
    campaign: Optional[Campaign] = Field(
        None,
        description='The Campaign Context. The Campaign Specific Meta Context',
        title='CampaignContext',
    )
    device: Optional[Device] = Field(
        None,
        description='The Device Context. The Device Specific Meta Context',
        title='DeviceContext',
    )
    source: Optional[Source] = Field(
        None,
        description='The Source Context. The Eventing Source Meta Context',
        title='SourceContext',
    )
    experiment: Optional[Experiment] = Field(
        None,
        description='The Experiment Context. The Experiment Specific Meta Context',
        title='ExperimentContext',
    )
    session: Optional[Session] = Field(
        None,
        description='The Session Context. The Session Specific Meta Context that describes missions, challenges, levels and other session-based experiences',
        title='SessionContext',
    )
    profile: Optional[Profile] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    targetProfile: Optional[TargetProfile] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    map: Optional[Map] = Field(
        None,
        description='The Map Context. The Map Specific Meta Context that describes the in-game area and location',
        title='MapContext',
    )


class Identity(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    profileId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    wallet: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    anonymous: bool
    username: Optional[str] = None
    email: Optional[str] = None
    plan: Optional[str] = None


class Content(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class LinkedContent(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class Prize(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[float] = None
    level: Optional[float] = None
    amount: Optional[float] = None
    isUnique: Optional[bool] = True
    isItem: Optional[bool] = True
    isCurrency: Optional[bool] = True


class Gear(BaseModel):
    level: Optional[float] = None
    value: Optional[float] = None
    class_: Optional[str] = Field(None, alias='class')
    isUnique: Optional[bool] = True


class TxType(BaseModel):
    isAchievementReward: Optional[bool] = True
    isRedeem: Optional[bool] = True
    isReward: Optional[bool] = True
    isAdReward: Optional[bool] = True
    isInappPurchase: Optional[bool] = True
    isRenewal: Optional[bool] = True
    isPurchase: Optional[bool] = True
    isFXTrade: Optional[bool] = True
    isSale: Optional[bool] = True
    isTrade: Optional[bool] = True
    isDrop: Optional[bool] = True
    isLoot: Optional[bool] = True
    isGained: Optional[bool] = True
    isContract: Optional[bool] = True


class Transaction(BaseModel):
    id: Optional[str] = None
    receipt: Optional[str] = None
    receiptSignature: Optional[str] = None
    transactorId: Optional[str] = None
    transactorName: Optional[str] = None
    transactorType: Optional[str] = None
    receiverId: Optional[str] = None
    receiverName: Optional[str] = None
    receiverType: Optional[str] = None
    network: Optional[str] = None
    checkoutId: Optional[str] = None
    orderId: Optional[str] = None
    storeId: Optional[str] = None
    storeSourceId: Optional[str] = None
    renewalCount: Optional[float] = 0
    feesTotal: Optional[float] = None
    priceTotal: Optional[float] = None
    discountTotal: Optional[float] = None
    quantity: Optional[float] = None
    amount: Optional[float] = None
    currency: Optional[str] = None
    paymentMethod: Optional[str] = None
    paymentProvider: Optional[str] = None
    virtualAmount: Optional[float] = None
    virtualCurrency: Optional[str] = None
    virtualCurrencyType: Optional[str] = None
    blob: Optional[str] = None


class Price(BaseModel):
    amount: Optional[float] = Field(
        None, description='For either asking or bidding price'
    )
    currency: Optional[str] = None
    currencyType: Optional[str] = None


class Social(BaseModel):
    recipient: Optional[str] = None
    sender: Optional[str] = None
    groupName: Optional[str] = None
    via: Optional[str] = None
    message: Optional[str] = None
    rating: Optional[str] = None


class Mission(BaseModel):
    duration: Optional[float] = None
    rank: Optional[float] = None
    rankName: Optional[str] = None
    score: Optional[float] = None
    moves: Optional[float] = None
    remaining: Optional[float] = None


class Ad(BaseModel):
    publisher: Optional[str] = None
    position: Optional[float] = None
    totalLength: Optional[float] = None
    quartile: Optional[float] = None
    placementId: Optional[str] = None
    placementName: Optional[str] = None


class Value(BaseModel):
    identity: Optional[Identity] = Field(
        None,
        description='The identity Value Payload. All the values to keep track of the profile and user',
        title='Identity',
    )
    content: Optional[Content] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    linkedContent: Optional[LinkedContent] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    prize: Optional[Prize] = Field(
        None,
        description='The prize/rewards Value Payload. All the values for prize/rewards-based interactions',
        title='Prize',
    )
    gear: Optional[Gear] = Field(
        None,
        description='The gear Value Payload. All the values for gear-based acquisition interactions',
        title='Gear',
    )
    txType: Optional[TxType] = Field(
        None,
        description='The TransactionType. All the values to set what kind of transaction is it',
        title='TxType',
    )
    transaction: Optional[Transaction] = Field(
        None,
        description='The Transaction Payload. All the values for Transaction interactions',
        title='Transaction',
    )
    price: Optional[Price] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Price',
    )
    social: Optional[Social] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Social',
    )
    mission: Optional[Mission] = Field(
        None,
        description='The mission Value Payload. All the values for Mission/Quest/Level/Session/Matchmaking/Season interactions',
        title='Mission',
    )
    ad: Optional[Ad] = Field(
        None,
        description='The Ad Value Payload. All the values for Ad interactions',
        title='Advertisement',
    )
    customRef: Optional[str] = None
    customValue: Optional[float] = None
    customMeta: Optional[Dict[str, Any]] = None


class TypeListEnum(Enum):
    Resource = 'Resource'
    Item = 'Item'
    Craft = 'Craft'
    Input = 'Input'
    Modifier = 'Modifier'
    Profile = 'Profile'
    Character = 'Character'


class Type1(Enum):
    Probability = 'Probability'
    Quantity = 'Quantity'
    Quality = 'Quality'
    Rate = 'Rate'
    Number = 'Number'
    Percentage = 'Percentage'
    Time = 'Time'


class Type2(Enum):
    Mapping = 'Mapping'
    Leveling = 'Leveling'
    Class = 'Class'
    Time = 'Time'
    Default = 'Default'


class Variation(BaseModel):
    type: Type2 = Field(
        ...,
        description='Variable Variation Type Whether this is a variation variable',
        title='VariableVariationType',
    )
    key: str
    value: float


class Variable(BaseModel):
    type: Type1 = Field(
        ...,
        description='Variable Type What kind of value the variable holds',
        title='VariableType',
    )
    key: str
    value: float
    variations: Optional[List[Variation]] = Field(
        None, description='The list of asset variations values', title='variations'
    )


class LinkedAsset(BaseModel):
    assetId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    typeList: List[TypeListEnum] = Field(
        ...,
        description='The list of types that the asset is associated with',
        ge=1.0,
        title='typeList',
        unique_items=True,
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset depends to, in order to be produced',
        title='inputs',
    )
    outputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset can produce',
        title='outputs',
    )
    classification: Optional[str] = Field(
        None, description='Type, eg is Weapon, is Potion', title='classification'
    )
    categories: Optional[List[str]] = Field(
        None, description='eg 1. Melee, 2. Sword', title='categories'
    )
    variables: Optional[List[Variable]] = Field(None, title='variables')


class LinkedProductItem(BaseModel):
    productId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sku: Optional[str] = None
    category: Optional[str] = None
    name: Optional[str] = None
    brand: Optional[str] = None
    variant: Optional[str] = None
    quantity: Optional[float] = None
    price: Optional[float] = None
    currency: Optional[str] = None
    imageUri: Optional[str] = None
    uri: Optional[str] = None


class AdEvent(BaseModel):
    type: Type = Field(
        ...,
        description='Event TypeDescribes the body of the AdEventType',
        title='AdEventType',
    )
    version: Optional[str] = Field(
        '$LATEST',
        description='The Version reference type (Semver). The type that is used to refer to the eventing version',
    )
    eventId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    appId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    playerId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sessionId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    doTrack: Optional[bool] = True
    expiresAt: Optional[int] = None
    receivedAt: Optional[int] = None
    sentAt: Optional[int] = None
    timestamp: Optional[int] = None
    eventSinceAppstart: Optional[int] = Field(
        0, description='event since app start, 0 if N/A'
    )
    sourceContext: Optional[SourceContext] = Field(
        None,
        description='Event Source Context record. The Meta Context of the Source for the Eventing payload origins',
        title='EventSourceContextSchema',
    )
    value: Value = Field(
        ..., description='The Value Event class', title='The Value payload'
    )
    linkedAssets: Optional[List[LinkedAsset]] = Field(
        None,
        description='Event Linked Assets. The list of linked assets that are associated with this event',
        title='linkedAssets',
    )
    linkedProduct: Optional[List[LinkedProductItem]] = Field(
        None,
        description='Event Linked Product. The list of linked Product that are associated with this event',
        title='linkedProduct',
    )


class Type3(Enum):
    AppOpenedEvent = 'AppOpenedEvent'
    AppStart = 'AppStart'
    AppRunning = 'AppRunning'
    AppStop = 'AppStop'
    AppUpdate = 'AppUpdate'
    AppInstall = 'AppInstall'
    GameStarted = 'GameStarted'
    GameEnded = 'GameEnded'
    GameRunning = 'GameRunning'


class App1(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    build: Optional[str] = None
    namespace: Optional[str] = None


class Campaign1(BaseModel):
    name: Optional[str] = None
    affiliate: Optional[str] = None
    provider: Optional[str] = None
    source: Optional[str] = None
    medium: Optional[str] = None
    term: Optional[str] = None
    contentId: Optional[str] = None
    contentType: Optional[str] = None
    creativeUri: Optional[str] = None
    marketingTactic: Optional[str] = None
    group: Optional[str] = None
    uri: Optional[str] = None
    eCPM: Optional[float] = None
    idfv: Optional[str] = None


class Screen1(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None
    density: Optional[float] = None


class Location1(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    continent: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed: Optional[float] = None


class Device1(BaseModel):
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    fullScreen: Optional[bool] = None
    adTrackingEnabled: Optional[bool] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    name: Optional[str] = None
    osName: Optional[str] = None
    osType: Optional[str] = None
    osVersion: Optional[str] = None
    jailbroken: Optional[bool] = None
    token: Optional[str] = None
    ip: Optional[str] = None
    userAgent: Optional[str] = None
    engine: Optional[str] = None
    engineVersion: Optional[str] = None
    client: Optional[str] = None
    locale: Optional[str] = None
    bluetooth: Optional[bool] = None
    carrier: Optional[str] = None
    cellular: Optional[bool] = None
    wifi: Optional[bool] = None
    screen: Optional[Screen1] = Field(
        None,
        description='The Device Screen. The Device Specific Screen properties',
        title='screen',
    )
    location: Optional[Location1] = Field(
        None,
        description='The Device Location. The Device Location meta context',
        title='location',
    )


class Source1(BaseModel):
    worldId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    realmId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    serverId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    shardId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    method: Optional[str] = None
    path: Optional[str] = None
    referrer: Optional[str] = None
    search: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    environment: Optional[str] = None


class Experiment1(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    group: Optional[str] = None
    variation: Optional[str] = None
    uri: Optional[str] = None


class Session1(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    theme: Optional[str] = None
    genre: Optional[str] = None
    level: Optional[float] = None
    progress: Optional[float] = None
    difficulty: Optional[float] = None


class Profile1(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class TargetProfile1(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class Map1(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    level: Optional[float] = None
    position: Optional[float] = None


class SourceContext1(BaseModel):
    app: Optional[App1] = Field(
        None,
        description='The App Context. The App Specific Meta Context',
        title='AppContext',
    )
    campaign: Optional[Campaign1] = Field(
        None,
        description='The Campaign Context. The Campaign Specific Meta Context',
        title='CampaignContext',
    )
    device: Optional[Device1] = Field(
        None,
        description='The Device Context. The Device Specific Meta Context',
        title='DeviceContext',
    )
    source: Optional[Source1] = Field(
        None,
        description='The Source Context. The Eventing Source Meta Context',
        title='SourceContext',
    )
    experiment: Optional[Experiment1] = Field(
        None,
        description='The Experiment Context. The Experiment Specific Meta Context',
        title='ExperimentContext',
    )
    session: Optional[Session1] = Field(
        None,
        description='The Session Context. The Session Specific Meta Context that describes missions, challenges, levels and other session-based experiences',
        title='SessionContext',
    )
    profile: Optional[Profile1] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    targetProfile: Optional[TargetProfile1] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    map: Optional[Map1] = Field(
        None,
        description='The Map Context. The Map Specific Meta Context that describes the in-game area and location',
        title='MapContext',
    )


class Identity1(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    profileId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    wallet: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    anonymous: bool
    username: Optional[str] = None
    email: Optional[str] = None
    plan: Optional[str] = None


class Content1(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class LinkedContent1(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class Prize1(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[float] = None
    level: Optional[float] = None
    amount: Optional[float] = None
    isUnique: Optional[bool] = True
    isItem: Optional[bool] = True
    isCurrency: Optional[bool] = True


class Gear1(BaseModel):
    level: Optional[float] = None
    value: Optional[float] = None
    class_: Optional[str] = Field(None, alias='class')
    isUnique: Optional[bool] = True


class TxType1(BaseModel):
    isAchievementReward: Optional[bool] = True
    isRedeem: Optional[bool] = True
    isReward: Optional[bool] = True
    isAdReward: Optional[bool] = True
    isInappPurchase: Optional[bool] = True
    isRenewal: Optional[bool] = True
    isPurchase: Optional[bool] = True
    isFXTrade: Optional[bool] = True
    isSale: Optional[bool] = True
    isTrade: Optional[bool] = True
    isDrop: Optional[bool] = True
    isLoot: Optional[bool] = True
    isGained: Optional[bool] = True
    isContract: Optional[bool] = True


class Transaction1(BaseModel):
    id: Optional[str] = None
    receipt: Optional[str] = None
    receiptSignature: Optional[str] = None
    transactorId: Optional[str] = None
    transactorName: Optional[str] = None
    transactorType: Optional[str] = None
    receiverId: Optional[str] = None
    receiverName: Optional[str] = None
    receiverType: Optional[str] = None
    network: Optional[str] = None
    checkoutId: Optional[str] = None
    orderId: Optional[str] = None
    storeId: Optional[str] = None
    storeSourceId: Optional[str] = None
    renewalCount: Optional[float] = 0
    feesTotal: Optional[float] = None
    priceTotal: Optional[float] = None
    discountTotal: Optional[float] = None
    quantity: Optional[float] = None
    amount: Optional[float] = None
    currency: Optional[str] = None
    paymentMethod: Optional[str] = None
    paymentProvider: Optional[str] = None
    virtualAmount: Optional[float] = None
    virtualCurrency: Optional[str] = None
    virtualCurrencyType: Optional[str] = None
    blob: Optional[str] = None


class Price1(BaseModel):
    amount: Optional[float] = Field(
        None, description='For either asking or bidding price'
    )
    currency: Optional[str] = None
    currencyType: Optional[str] = None


class Social1(BaseModel):
    recipient: Optional[str] = None
    sender: Optional[str] = None
    groupName: Optional[str] = None
    via: Optional[str] = None
    message: Optional[str] = None
    rating: Optional[str] = None


class Mission1(BaseModel):
    duration: Optional[float] = None
    rank: Optional[float] = None
    rankName: Optional[str] = None
    score: Optional[float] = None
    moves: Optional[float] = None
    remaining: Optional[float] = None


class Ad1(BaseModel):
    publisher: Optional[str] = None
    position: Optional[float] = None
    totalLength: Optional[float] = None
    quartile: Optional[float] = None
    placementId: Optional[str] = None
    placementName: Optional[str] = None


class Value1(BaseModel):
    identity: Optional[Identity1] = Field(
        None,
        description='The identity Value Payload. All the values to keep track of the profile and user',
        title='Identity',
    )
    content: Optional[Content1] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    linkedContent: Optional[LinkedContent1] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    prize: Optional[Prize1] = Field(
        None,
        description='The prize/rewards Value Payload. All the values for prize/rewards-based interactions',
        title='Prize',
    )
    gear: Optional[Gear1] = Field(
        None,
        description='The gear Value Payload. All the values for gear-based acquisition interactions',
        title='Gear',
    )
    txType: Optional[TxType1] = Field(
        None,
        description='The TransactionType. All the values to set what kind of transaction is it',
        title='TxType',
    )
    transaction: Optional[Transaction1] = Field(
        None,
        description='The Transaction Payload. All the values for Transaction interactions',
        title='Transaction',
    )
    price: Optional[Price1] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Price',
    )
    social: Optional[Social1] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Social',
    )
    mission: Optional[Mission1] = Field(
        None,
        description='The mission Value Payload. All the values for Mission/Quest/Level/Session/Matchmaking/Season interactions',
        title='Mission',
    )
    ad: Optional[Ad1] = Field(
        None,
        description='The Ad Value Payload. All the values for Ad interactions',
        title='Advertisement',
    )
    customRef: Optional[str] = None
    customValue: Optional[float] = None
    customMeta: Optional[Dict[str, Any]] = None


class TypeListEnum1(Enum):
    Resource = 'Resource'
    Item = 'Item'
    Craft = 'Craft'
    Input = 'Input'
    Modifier = 'Modifier'
    Profile = 'Profile'
    Character = 'Character'


class Type4(Enum):
    Probability = 'Probability'
    Quantity = 'Quantity'
    Quality = 'Quality'
    Rate = 'Rate'
    Number = 'Number'
    Percentage = 'Percentage'
    Time = 'Time'


class Type5(Enum):
    Mapping = 'Mapping'
    Leveling = 'Leveling'
    Class = 'Class'
    Time = 'Time'
    Default = 'Default'


class Variation1(BaseModel):
    type: Type5 = Field(
        ...,
        description='Variable Variation Type Whether this is a variation variable',
        title='VariableVariationType',
    )
    key: str
    value: float


class Variable1(BaseModel):
    type: Type4 = Field(
        ...,
        description='Variable Type What kind of value the variable holds',
        title='VariableType',
    )
    key: str
    value: float
    variations: Optional[List[Variation1]] = Field(
        None, description='The list of asset variations values', title='variations'
    )


class LinkedAsset1(BaseModel):
    assetId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    typeList: List[TypeListEnum1] = Field(
        ...,
        description='The list of types that the asset is associated with',
        ge=1.0,
        title='typeList',
        unique_items=True,
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset depends to, in order to be produced',
        title='inputs',
    )
    outputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset can produce',
        title='outputs',
    )
    classification: Optional[str] = Field(
        None, description='Type, eg is Weapon, is Potion', title='classification'
    )
    categories: Optional[List[str]] = Field(
        None, description='eg 1. Melee, 2. Sword', title='categories'
    )
    variables: Optional[List[Variable1]] = Field(None, title='variables')


class LinkedProductItem1(BaseModel):
    productId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sku: Optional[str] = None
    category: Optional[str] = None
    name: Optional[str] = None
    brand: Optional[str] = None
    variant: Optional[str] = None
    quantity: Optional[float] = None
    price: Optional[float] = None
    currency: Optional[str] = None
    imageUri: Optional[str] = None
    uri: Optional[str] = None


class AppLifecycleEvent(BaseModel):
    type: Type3 = Field(
        ...,
        description='Event TypeDescribes the body of the AppLifecycleEventType',
        title='AppLifecycleEventType',
    )
    version: Optional[str] = Field(
        '$LATEST',
        description='The Version reference type (Semver). The type that is used to refer to the eventing version',
    )
    eventId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    appId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    playerId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sessionId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    doTrack: Optional[bool] = True
    expiresAt: Optional[int] = None
    receivedAt: Optional[int] = None
    sentAt: Optional[int] = None
    timestamp: Optional[int] = None
    eventSinceAppstart: Optional[int] = Field(
        0, description='event since app start, 0 if N/A'
    )
    sourceContext: Optional[SourceContext1] = Field(
        None,
        description='Event Source Context record. The Meta Context of the Source for the Eventing payload origins',
        title='EventSourceContextSchema',
    )
    value: Value1 = Field(
        ..., description='The Value Event class', title='The Value payload'
    )
    linkedAssets: Optional[List[LinkedAsset1]] = Field(
        None,
        description='Event Linked Assets. The list of linked assets that are associated with this event',
        title='linkedAssets',
    )
    linkedProduct: Optional[List[LinkedProductItem1]] = Field(
        None,
        description='Event Linked Product. The list of linked Product that are associated with this event',
        title='linkedProduct',
    )


class Type6(Enum):
    Checkout = 'Checkout'
    Purchase = 'Purchase'
    Payment = 'Payment'
    Order = 'Order'
    Exchange = 'Exchange'
    Subscription = 'Subscription'
    RevenueRecord = 'RevenueRecord'
    Reward = 'Reward'
    Debit = 'Debit'
    Credit = 'Credit'
    SubscriptionCancel = 'SubscriptionCancel'


class App2(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    build: Optional[str] = None
    namespace: Optional[str] = None


class Campaign2(BaseModel):
    name: Optional[str] = None
    affiliate: Optional[str] = None
    provider: Optional[str] = None
    source: Optional[str] = None
    medium: Optional[str] = None
    term: Optional[str] = None
    contentId: Optional[str] = None
    contentType: Optional[str] = None
    creativeUri: Optional[str] = None
    marketingTactic: Optional[str] = None
    group: Optional[str] = None
    uri: Optional[str] = None
    eCPM: Optional[float] = None
    idfv: Optional[str] = None


class Screen2(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None
    density: Optional[float] = None


class Location2(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    continent: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed: Optional[float] = None


class Device2(BaseModel):
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    fullScreen: Optional[bool] = None
    adTrackingEnabled: Optional[bool] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    name: Optional[str] = None
    osName: Optional[str] = None
    osType: Optional[str] = None
    osVersion: Optional[str] = None
    jailbroken: Optional[bool] = None
    token: Optional[str] = None
    ip: Optional[str] = None
    userAgent: Optional[str] = None
    engine: Optional[str] = None
    engineVersion: Optional[str] = None
    client: Optional[str] = None
    locale: Optional[str] = None
    bluetooth: Optional[bool] = None
    carrier: Optional[str] = None
    cellular: Optional[bool] = None
    wifi: Optional[bool] = None
    screen: Optional[Screen2] = Field(
        None,
        description='The Device Screen. The Device Specific Screen properties',
        title='screen',
    )
    location: Optional[Location2] = Field(
        None,
        description='The Device Location. The Device Location meta context',
        title='location',
    )


class Source2(BaseModel):
    worldId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    realmId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    serverId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    shardId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    method: Optional[str] = None
    path: Optional[str] = None
    referrer: Optional[str] = None
    search: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    environment: Optional[str] = None


class Experiment2(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    group: Optional[str] = None
    variation: Optional[str] = None
    uri: Optional[str] = None


class Session2(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    theme: Optional[str] = None
    genre: Optional[str] = None
    level: Optional[float] = None
    progress: Optional[float] = None
    difficulty: Optional[float] = None


class Profile2(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class TargetProfile2(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class Map2(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    level: Optional[float] = None
    position: Optional[float] = None


class SourceContext2(BaseModel):
    app: Optional[App2] = Field(
        None,
        description='The App Context. The App Specific Meta Context',
        title='AppContext',
    )
    campaign: Optional[Campaign2] = Field(
        None,
        description='The Campaign Context. The Campaign Specific Meta Context',
        title='CampaignContext',
    )
    device: Optional[Device2] = Field(
        None,
        description='The Device Context. The Device Specific Meta Context',
        title='DeviceContext',
    )
    source: Optional[Source2] = Field(
        None,
        description='The Source Context. The Eventing Source Meta Context',
        title='SourceContext',
    )
    experiment: Optional[Experiment2] = Field(
        None,
        description='The Experiment Context. The Experiment Specific Meta Context',
        title='ExperimentContext',
    )
    session: Optional[Session2] = Field(
        None,
        description='The Session Context. The Session Specific Meta Context that describes missions, challenges, levels and other session-based experiences',
        title='SessionContext',
    )
    profile: Optional[Profile2] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    targetProfile: Optional[TargetProfile2] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    map: Optional[Map2] = Field(
        None,
        description='The Map Context. The Map Specific Meta Context that describes the in-game area and location',
        title='MapContext',
    )


class Identity2(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    profileId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    wallet: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    anonymous: bool
    username: Optional[str] = None
    email: Optional[str] = None
    plan: Optional[str] = None


class Content2(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class LinkedContent2(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class Prize2(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[float] = None
    level: Optional[float] = None
    amount: Optional[float] = None
    isUnique: Optional[bool] = True
    isItem: Optional[bool] = True
    isCurrency: Optional[bool] = True


class Gear2(BaseModel):
    level: Optional[float] = None
    value: Optional[float] = None
    class_: Optional[str] = Field(None, alias='class')
    isUnique: Optional[bool] = True


class TxType2(BaseModel):
    isAchievementReward: Optional[bool] = True
    isRedeem: Optional[bool] = True
    isReward: Optional[bool] = True
    isAdReward: Optional[bool] = True
    isInappPurchase: Optional[bool] = True
    isRenewal: Optional[bool] = True
    isPurchase: Optional[bool] = True
    isFXTrade: Optional[bool] = True
    isSale: Optional[bool] = True
    isTrade: Optional[bool] = True
    isDrop: Optional[bool] = True
    isLoot: Optional[bool] = True
    isGained: Optional[bool] = True
    isContract: Optional[bool] = True


class Transaction2(BaseModel):
    id: Optional[str] = None
    receipt: Optional[str] = None
    receiptSignature: Optional[str] = None
    transactorId: Optional[str] = None
    transactorName: Optional[str] = None
    transactorType: Optional[str] = None
    receiverId: Optional[str] = None
    receiverName: Optional[str] = None
    receiverType: Optional[str] = None
    network: Optional[str] = None
    checkoutId: Optional[str] = None
    orderId: Optional[str] = None
    storeId: Optional[str] = None
    storeSourceId: Optional[str] = None
    renewalCount: Optional[float] = 0
    feesTotal: Optional[float] = None
    priceTotal: Optional[float] = None
    discountTotal: Optional[float] = None
    quantity: Optional[float] = None
    amount: Optional[float] = None
    currency: Optional[str] = None
    paymentMethod: Optional[str] = None
    paymentProvider: Optional[str] = None
    virtualAmount: Optional[float] = None
    virtualCurrency: Optional[str] = None
    virtualCurrencyType: Optional[str] = None
    blob: Optional[str] = None


class Price2(BaseModel):
    amount: Optional[float] = Field(
        None, description='For either asking or bidding price'
    )
    currency: Optional[str] = None
    currencyType: Optional[str] = None


class Social2(BaseModel):
    recipient: Optional[str] = None
    sender: Optional[str] = None
    groupName: Optional[str] = None
    via: Optional[str] = None
    message: Optional[str] = None
    rating: Optional[str] = None


class Mission2(BaseModel):
    duration: Optional[float] = None
    rank: Optional[float] = None
    rankName: Optional[str] = None
    score: Optional[float] = None
    moves: Optional[float] = None
    remaining: Optional[float] = None


class Ad2(BaseModel):
    publisher: Optional[str] = None
    position: Optional[float] = None
    totalLength: Optional[float] = None
    quartile: Optional[float] = None
    placementId: Optional[str] = None
    placementName: Optional[str] = None


class Value2(BaseModel):
    identity: Optional[Identity2] = Field(
        None,
        description='The identity Value Payload. All the values to keep track of the profile and user',
        title='Identity',
    )
    content: Optional[Content2] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    linkedContent: Optional[LinkedContent2] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    prize: Optional[Prize2] = Field(
        None,
        description='The prize/rewards Value Payload. All the values for prize/rewards-based interactions',
        title='Prize',
    )
    gear: Optional[Gear2] = Field(
        None,
        description='The gear Value Payload. All the values for gear-based acquisition interactions',
        title='Gear',
    )
    txType: Optional[TxType2] = Field(
        None,
        description='The TransactionType. All the values to set what kind of transaction is it',
        title='TxType',
    )
    transaction: Optional[Transaction2] = Field(
        None,
        description='The Transaction Payload. All the values for Transaction interactions',
        title='Transaction',
    )
    price: Optional[Price2] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Price',
    )
    social: Optional[Social2] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Social',
    )
    mission: Optional[Mission2] = Field(
        None,
        description='The mission Value Payload. All the values for Mission/Quest/Level/Session/Matchmaking/Season interactions',
        title='Mission',
    )
    ad: Optional[Ad2] = Field(
        None,
        description='The Ad Value Payload. All the values for Ad interactions',
        title='Advertisement',
    )
    customRef: Optional[str] = None
    customValue: Optional[float] = None
    customMeta: Optional[Dict[str, Any]] = None


class TypeListEnum2(Enum):
    Resource = 'Resource'
    Item = 'Item'
    Craft = 'Craft'
    Input = 'Input'
    Modifier = 'Modifier'
    Profile = 'Profile'
    Character = 'Character'


class Type7(Enum):
    Probability = 'Probability'
    Quantity = 'Quantity'
    Quality = 'Quality'
    Rate = 'Rate'
    Number = 'Number'
    Percentage = 'Percentage'
    Time = 'Time'


class Type8(Enum):
    Mapping = 'Mapping'
    Leveling = 'Leveling'
    Class = 'Class'
    Time = 'Time'
    Default = 'Default'


class Variation2(BaseModel):
    type: Type8 = Field(
        ...,
        description='Variable Variation Type Whether this is a variation variable',
        title='VariableVariationType',
    )
    key: str
    value: float


class Variable2(BaseModel):
    type: Type7 = Field(
        ...,
        description='Variable Type What kind of value the variable holds',
        title='VariableType',
    )
    key: str
    value: float
    variations: Optional[List[Variation2]] = Field(
        None, description='The list of asset variations values', title='variations'
    )


class LinkedAsset2(BaseModel):
    assetId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    typeList: List[TypeListEnum2] = Field(
        ...,
        description='The list of types that the asset is associated with',
        ge=1.0,
        title='typeList',
        unique_items=True,
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset depends to, in order to be produced',
        title='inputs',
    )
    outputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset can produce',
        title='outputs',
    )
    classification: Optional[str] = Field(
        None, description='Type, eg is Weapon, is Potion', title='classification'
    )
    categories: Optional[List[str]] = Field(
        None, description='eg 1. Melee, 2. Sword', title='categories'
    )
    variables: Optional[List[Variable2]] = Field(None, title='variables')


class LinkedProductItem2(BaseModel):
    productId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sku: Optional[str] = None
    category: Optional[str] = None
    name: Optional[str] = None
    brand: Optional[str] = None
    variant: Optional[str] = None
    quantity: Optional[float] = None
    price: Optional[float] = None
    currency: Optional[str] = None
    imageUri: Optional[str] = None
    uri: Optional[str] = None


class CommerceEvent(BaseModel):
    type: Type6 = Field(
        ...,
        description='Event TypeDescribes the body of the CommerceEventType',
        title='CommerceEventType',
    )
    version: Optional[str] = Field(
        '$LATEST',
        description='The Version reference type (Semver). The type that is used to refer to the eventing version',
    )
    eventId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    appId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    playerId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sessionId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    doTrack: Optional[bool] = True
    expiresAt: Optional[int] = None
    receivedAt: Optional[int] = None
    sentAt: Optional[int] = None
    timestamp: Optional[int] = None
    eventSinceAppstart: Optional[int] = Field(
        0, description='event since app start, 0 if N/A'
    )
    sourceContext: Optional[SourceContext2] = Field(
        None,
        description='Event Source Context record. The Meta Context of the Source for the Eventing payload origins',
        title='EventSourceContextSchema',
    )
    value: Value2 = Field(
        ..., description='The Value Event class', title='The Value payload'
    )
    linkedAssets: Optional[List[LinkedAsset2]] = Field(
        None,
        description='Event Linked Assets. The list of linked assets that are associated with this event',
        title='linkedAssets',
    )
    linkedProduct: Optional[List[LinkedProductItem2]] = Field(
        None,
        description='Event Linked Product. The list of linked Product that are associated with this event',
        title='linkedProduct',
    )


class Type9(Enum):
    ProgressionStart = 'ProgressionStart'
    ProgressionComplete = 'ProgressionComplete'
    ProgressionFail = 'ProgressionFail'


class App3(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    build: Optional[str] = None
    namespace: Optional[str] = None


class Campaign3(BaseModel):
    name: Optional[str] = None
    affiliate: Optional[str] = None
    provider: Optional[str] = None
    source: Optional[str] = None
    medium: Optional[str] = None
    term: Optional[str] = None
    contentId: Optional[str] = None
    contentType: Optional[str] = None
    creativeUri: Optional[str] = None
    marketingTactic: Optional[str] = None
    group: Optional[str] = None
    uri: Optional[str] = None
    eCPM: Optional[float] = None
    idfv: Optional[str] = None


class Screen3(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None
    density: Optional[float] = None


class Location3(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    continent: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed: Optional[float] = None


class Device3(BaseModel):
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    fullScreen: Optional[bool] = None
    adTrackingEnabled: Optional[bool] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    name: Optional[str] = None
    osName: Optional[str] = None
    osType: Optional[str] = None
    osVersion: Optional[str] = None
    jailbroken: Optional[bool] = None
    token: Optional[str] = None
    ip: Optional[str] = None
    userAgent: Optional[str] = None
    engine: Optional[str] = None
    engineVersion: Optional[str] = None
    client: Optional[str] = None
    locale: Optional[str] = None
    bluetooth: Optional[bool] = None
    carrier: Optional[str] = None
    cellular: Optional[bool] = None
    wifi: Optional[bool] = None
    screen: Optional[Screen3] = Field(
        None,
        description='The Device Screen. The Device Specific Screen properties',
        title='screen',
    )
    location: Optional[Location3] = Field(
        None,
        description='The Device Location. The Device Location meta context',
        title='location',
    )


class Source3(BaseModel):
    worldId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    realmId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    serverId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    shardId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    method: Optional[str] = None
    path: Optional[str] = None
    referrer: Optional[str] = None
    search: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    environment: Optional[str] = None


class Experiment3(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    group: Optional[str] = None
    variation: Optional[str] = None
    uri: Optional[str] = None


class Session3(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    theme: Optional[str] = None
    genre: Optional[str] = None
    level: Optional[float] = None
    progress: Optional[float] = None
    difficulty: Optional[float] = None


class Profile3(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class TargetProfile3(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class Map3(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    level: Optional[float] = None
    position: Optional[float] = None


class SourceContext3(BaseModel):
    app: Optional[App3] = Field(
        None,
        description='The App Context. The App Specific Meta Context',
        title='AppContext',
    )
    campaign: Optional[Campaign3] = Field(
        None,
        description='The Campaign Context. The Campaign Specific Meta Context',
        title='CampaignContext',
    )
    device: Optional[Device3] = Field(
        None,
        description='The Device Context. The Device Specific Meta Context',
        title='DeviceContext',
    )
    source: Optional[Source3] = Field(
        None,
        description='The Source Context. The Eventing Source Meta Context',
        title='SourceContext',
    )
    experiment: Optional[Experiment3] = Field(
        None,
        description='The Experiment Context. The Experiment Specific Meta Context',
        title='ExperimentContext',
    )
    session: Optional[Session3] = Field(
        None,
        description='The Session Context. The Session Specific Meta Context that describes missions, challenges, levels and other session-based experiences',
        title='SessionContext',
    )
    profile: Optional[Profile3] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    targetProfile: Optional[TargetProfile3] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    map: Optional[Map3] = Field(
        None,
        description='The Map Context. The Map Specific Meta Context that describes the in-game area and location',
        title='MapContext',
    )


class Identity3(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    profileId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    wallet: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    anonymous: bool
    username: Optional[str] = None
    email: Optional[str] = None
    plan: Optional[str] = None


class Content3(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class LinkedContent3(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class Prize3(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[float] = None
    level: Optional[float] = None
    amount: Optional[float] = None
    isUnique: Optional[bool] = True
    isItem: Optional[bool] = True
    isCurrency: Optional[bool] = True


class Gear3(BaseModel):
    level: Optional[float] = None
    value: Optional[float] = None
    class_: Optional[str] = Field(None, alias='class')
    isUnique: Optional[bool] = True


class TxType3(BaseModel):
    isAchievementReward: Optional[bool] = True
    isRedeem: Optional[bool] = True
    isReward: Optional[bool] = True
    isAdReward: Optional[bool] = True
    isInappPurchase: Optional[bool] = True
    isRenewal: Optional[bool] = True
    isPurchase: Optional[bool] = True
    isFXTrade: Optional[bool] = True
    isSale: Optional[bool] = True
    isTrade: Optional[bool] = True
    isDrop: Optional[bool] = True
    isLoot: Optional[bool] = True
    isGained: Optional[bool] = True
    isContract: Optional[bool] = True


class Transaction3(BaseModel):
    id: Optional[str] = None
    receipt: Optional[str] = None
    receiptSignature: Optional[str] = None
    transactorId: Optional[str] = None
    transactorName: Optional[str] = None
    transactorType: Optional[str] = None
    receiverId: Optional[str] = None
    receiverName: Optional[str] = None
    receiverType: Optional[str] = None
    network: Optional[str] = None
    checkoutId: Optional[str] = None
    orderId: Optional[str] = None
    storeId: Optional[str] = None
    storeSourceId: Optional[str] = None
    renewalCount: Optional[float] = 0
    feesTotal: Optional[float] = None
    priceTotal: Optional[float] = None
    discountTotal: Optional[float] = None
    quantity: Optional[float] = None
    amount: Optional[float] = None
    currency: Optional[str] = None
    paymentMethod: Optional[str] = None
    paymentProvider: Optional[str] = None
    virtualAmount: Optional[float] = None
    virtualCurrency: Optional[str] = None
    virtualCurrencyType: Optional[str] = None
    blob: Optional[str] = None


class Price3(BaseModel):
    amount: Optional[float] = Field(
        None, description='For either asking or bidding price'
    )
    currency: Optional[str] = None
    currencyType: Optional[str] = None


class Social3(BaseModel):
    recipient: Optional[str] = None
    sender: Optional[str] = None
    groupName: Optional[str] = None
    via: Optional[str] = None
    message: Optional[str] = None
    rating: Optional[str] = None


class Mission3(BaseModel):
    duration: Optional[float] = None
    rank: Optional[float] = None
    rankName: Optional[str] = None
    score: Optional[float] = None
    moves: Optional[float] = None
    remaining: Optional[float] = None


class Ad3(BaseModel):
    publisher: Optional[str] = None
    position: Optional[float] = None
    totalLength: Optional[float] = None
    quartile: Optional[float] = None
    placementId: Optional[str] = None
    placementName: Optional[str] = None


class Value3(BaseModel):
    identity: Optional[Identity3] = Field(
        None,
        description='The identity Value Payload. All the values to keep track of the profile and user',
        title='Identity',
    )
    content: Optional[Content3] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    linkedContent: Optional[LinkedContent3] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    prize: Optional[Prize3] = Field(
        None,
        description='The prize/rewards Value Payload. All the values for prize/rewards-based interactions',
        title='Prize',
    )
    gear: Optional[Gear3] = Field(
        None,
        description='The gear Value Payload. All the values for gear-based acquisition interactions',
        title='Gear',
    )
    txType: Optional[TxType3] = Field(
        None,
        description='The TransactionType. All the values to set what kind of transaction is it',
        title='TxType',
    )
    transaction: Optional[Transaction3] = Field(
        None,
        description='The Transaction Payload. All the values for Transaction interactions',
        title='Transaction',
    )
    price: Optional[Price3] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Price',
    )
    social: Optional[Social3] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Social',
    )
    mission: Optional[Mission3] = Field(
        None,
        description='The mission Value Payload. All the values for Mission/Quest/Level/Session/Matchmaking/Season interactions',
        title='Mission',
    )
    ad: Optional[Ad3] = Field(
        None,
        description='The Ad Value Payload. All the values for Ad interactions',
        title='Advertisement',
    )
    customRef: Optional[str] = None
    customValue: Optional[float] = None
    customMeta: Optional[Dict[str, Any]] = None


class TypeListEnum3(Enum):
    Resource = 'Resource'
    Item = 'Item'
    Craft = 'Craft'
    Input = 'Input'
    Modifier = 'Modifier'
    Profile = 'Profile'
    Character = 'Character'


class Type10(Enum):
    Probability = 'Probability'
    Quantity = 'Quantity'
    Quality = 'Quality'
    Rate = 'Rate'
    Number = 'Number'
    Percentage = 'Percentage'
    Time = 'Time'


class Type11(Enum):
    Mapping = 'Mapping'
    Leveling = 'Leveling'
    Class = 'Class'
    Time = 'Time'
    Default = 'Default'


class Variation3(BaseModel):
    type: Type11 = Field(
        ...,
        description='Variable Variation Type Whether this is a variation variable',
        title='VariableVariationType',
    )
    key: str
    value: float


class Variable3(BaseModel):
    type: Type10 = Field(
        ...,
        description='Variable Type What kind of value the variable holds',
        title='VariableType',
    )
    key: str
    value: float
    variations: Optional[List[Variation3]] = Field(
        None, description='The list of asset variations values', title='variations'
    )


class LinkedAsset3(BaseModel):
    assetId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    typeList: List[TypeListEnum3] = Field(
        ...,
        description='The list of types that the asset is associated with',
        ge=1.0,
        title='typeList',
        unique_items=True,
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset depends to, in order to be produced',
        title='inputs',
    )
    outputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset can produce',
        title='outputs',
    )
    classification: Optional[str] = Field(
        None, description='Type, eg is Weapon, is Potion', title='classification'
    )
    categories: Optional[List[str]] = Field(
        None, description='eg 1. Melee, 2. Sword', title='categories'
    )
    variables: Optional[List[Variable3]] = Field(None, title='variables')


class LinkedProductItem3(BaseModel):
    productId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sku: Optional[str] = None
    category: Optional[str] = None
    name: Optional[str] = None
    brand: Optional[str] = None
    variant: Optional[str] = None
    quantity: Optional[float] = None
    price: Optional[float] = None
    currency: Optional[str] = None
    imageUri: Optional[str] = None
    uri: Optional[str] = None


class GenericProgressEvent(BaseModel):
    type: Type9 = Field(
        ...,
        description='Event TypeDescribes the body of the GenericProgressEventType',
        title='GenericProgressEventType',
    )
    version: Optional[str] = Field(
        '$LATEST',
        description='The Version reference type (Semver). The type that is used to refer to the eventing version',
    )
    eventId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    appId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    playerId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sessionId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    doTrack: Optional[bool] = True
    expiresAt: Optional[int] = None
    receivedAt: Optional[int] = None
    sentAt: Optional[int] = None
    timestamp: Optional[int] = None
    eventSinceAppstart: Optional[int] = Field(
        0, description='event since app start, 0 if N/A'
    )
    sourceContext: Optional[SourceContext3] = Field(
        None,
        description='Event Source Context record. The Meta Context of the Source for the Eventing payload origins',
        title='EventSourceContextSchema',
    )
    value: Value3 = Field(
        ..., description='The Value Event class', title='The Value payload'
    )
    linkedAssets: Optional[List[LinkedAsset3]] = Field(
        None,
        description='Event Linked Assets. The list of linked assets that are associated with this event',
        title='linkedAssets',
    )
    linkedProduct: Optional[List[LinkedProductItem3]] = Field(
        None,
        description='Event Linked Product. The list of linked Product that are associated with this event',
        title='linkedProduct',
    )


class Type12(Enum):
    Identity = 'Identity'
    DeviceInfo = 'DeviceInfo'
    NewUser = 'NewUser'
    NewPlayer = 'NewPlayer'
    DDNADontTrack = 'DDNADontTrack'
    Login = 'Login'
    Register = 'Register'
    KYCPass = 'KYCPass'
    Validated = 'Validated'
    Alias = 'Alias'


class App4(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    build: Optional[str] = None
    namespace: Optional[str] = None


class Campaign4(BaseModel):
    name: Optional[str] = None
    affiliate: Optional[str] = None
    provider: Optional[str] = None
    source: Optional[str] = None
    medium: Optional[str] = None
    term: Optional[str] = None
    contentId: Optional[str] = None
    contentType: Optional[str] = None
    creativeUri: Optional[str] = None
    marketingTactic: Optional[str] = None
    group: Optional[str] = None
    uri: Optional[str] = None
    eCPM: Optional[float] = None
    idfv: Optional[str] = None


class Screen4(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None
    density: Optional[float] = None


class Location4(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    continent: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed: Optional[float] = None


class Device4(BaseModel):
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    fullScreen: Optional[bool] = None
    adTrackingEnabled: Optional[bool] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    name: Optional[str] = None
    osName: Optional[str] = None
    osType: Optional[str] = None
    osVersion: Optional[str] = None
    jailbroken: Optional[bool] = None
    token: Optional[str] = None
    ip: Optional[str] = None
    userAgent: Optional[str] = None
    engine: Optional[str] = None
    engineVersion: Optional[str] = None
    client: Optional[str] = None
    locale: Optional[str] = None
    bluetooth: Optional[bool] = None
    carrier: Optional[str] = None
    cellular: Optional[bool] = None
    wifi: Optional[bool] = None
    screen: Optional[Screen4] = Field(
        None,
        description='The Device Screen. The Device Specific Screen properties',
        title='screen',
    )
    location: Optional[Location4] = Field(
        None,
        description='The Device Location. The Device Location meta context',
        title='location',
    )


class Source4(BaseModel):
    worldId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    realmId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    serverId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    shardId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    method: Optional[str] = None
    path: Optional[str] = None
    referrer: Optional[str] = None
    search: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    environment: Optional[str] = None


class Experiment4(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    group: Optional[str] = None
    variation: Optional[str] = None
    uri: Optional[str] = None


class Session4(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    theme: Optional[str] = None
    genre: Optional[str] = None
    level: Optional[float] = None
    progress: Optional[float] = None
    difficulty: Optional[float] = None


class Profile4(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class TargetProfile4(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class Map4(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    level: Optional[float] = None
    position: Optional[float] = None


class SourceContext4(BaseModel):
    app: Optional[App4] = Field(
        None,
        description='The App Context. The App Specific Meta Context',
        title='AppContext',
    )
    campaign: Optional[Campaign4] = Field(
        None,
        description='The Campaign Context. The Campaign Specific Meta Context',
        title='CampaignContext',
    )
    device: Optional[Device4] = Field(
        None,
        description='The Device Context. The Device Specific Meta Context',
        title='DeviceContext',
    )
    source: Optional[Source4] = Field(
        None,
        description='The Source Context. The Eventing Source Meta Context',
        title='SourceContext',
    )
    experiment: Optional[Experiment4] = Field(
        None,
        description='The Experiment Context. The Experiment Specific Meta Context',
        title='ExperimentContext',
    )
    session: Optional[Session4] = Field(
        None,
        description='The Session Context. The Session Specific Meta Context that describes missions, challenges, levels and other session-based experiences',
        title='SessionContext',
    )
    profile: Optional[Profile4] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    targetProfile: Optional[TargetProfile4] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    map: Optional[Map4] = Field(
        None,
        description='The Map Context. The Map Specific Meta Context that describes the in-game area and location',
        title='MapContext',
    )


class Identity4(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    profileId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    wallet: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    anonymous: bool
    username: Optional[str] = None
    email: Optional[str] = None
    plan: Optional[str] = None


class Content4(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class LinkedContent4(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class Prize4(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[float] = None
    level: Optional[float] = None
    amount: Optional[float] = None
    isUnique: Optional[bool] = True
    isItem: Optional[bool] = True
    isCurrency: Optional[bool] = True


class Gear4(BaseModel):
    level: Optional[float] = None
    value: Optional[float] = None
    class_: Optional[str] = Field(None, alias='class')
    isUnique: Optional[bool] = True


class TxType4(BaseModel):
    isAchievementReward: Optional[bool] = True
    isRedeem: Optional[bool] = True
    isReward: Optional[bool] = True
    isAdReward: Optional[bool] = True
    isInappPurchase: Optional[bool] = True
    isRenewal: Optional[bool] = True
    isPurchase: Optional[bool] = True
    isFXTrade: Optional[bool] = True
    isSale: Optional[bool] = True
    isTrade: Optional[bool] = True
    isDrop: Optional[bool] = True
    isLoot: Optional[bool] = True
    isGained: Optional[bool] = True
    isContract: Optional[bool] = True


class Transaction4(BaseModel):
    id: Optional[str] = None
    receipt: Optional[str] = None
    receiptSignature: Optional[str] = None
    transactorId: Optional[str] = None
    transactorName: Optional[str] = None
    transactorType: Optional[str] = None
    receiverId: Optional[str] = None
    receiverName: Optional[str] = None
    receiverType: Optional[str] = None
    network: Optional[str] = None
    checkoutId: Optional[str] = None
    orderId: Optional[str] = None
    storeId: Optional[str] = None
    storeSourceId: Optional[str] = None
    renewalCount: Optional[float] = 0
    feesTotal: Optional[float] = None
    priceTotal: Optional[float] = None
    discountTotal: Optional[float] = None
    quantity: Optional[float] = None
    amount: Optional[float] = None
    currency: Optional[str] = None
    paymentMethod: Optional[str] = None
    paymentProvider: Optional[str] = None
    virtualAmount: Optional[float] = None
    virtualCurrency: Optional[str] = None
    virtualCurrencyType: Optional[str] = None
    blob: Optional[str] = None


class Price4(BaseModel):
    amount: Optional[float] = Field(
        None, description='For either asking or bidding price'
    )
    currency: Optional[str] = None
    currencyType: Optional[str] = None


class Social4(BaseModel):
    recipient: Optional[str] = None
    sender: Optional[str] = None
    groupName: Optional[str] = None
    via: Optional[str] = None
    message: Optional[str] = None
    rating: Optional[str] = None


class Mission4(BaseModel):
    duration: Optional[float] = None
    rank: Optional[float] = None
    rankName: Optional[str] = None
    score: Optional[float] = None
    moves: Optional[float] = None
    remaining: Optional[float] = None


class Ad4(BaseModel):
    publisher: Optional[str] = None
    position: Optional[float] = None
    totalLength: Optional[float] = None
    quartile: Optional[float] = None
    placementId: Optional[str] = None
    placementName: Optional[str] = None


class Value4(BaseModel):
    identity: Optional[Identity4] = Field(
        None,
        description='The identity Value Payload. All the values to keep track of the profile and user',
        title='Identity',
    )
    content: Optional[Content4] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    linkedContent: Optional[LinkedContent4] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    prize: Optional[Prize4] = Field(
        None,
        description='The prize/rewards Value Payload. All the values for prize/rewards-based interactions',
        title='Prize',
    )
    gear: Optional[Gear4] = Field(
        None,
        description='The gear Value Payload. All the values for gear-based acquisition interactions',
        title='Gear',
    )
    txType: Optional[TxType4] = Field(
        None,
        description='The TransactionType. All the values to set what kind of transaction is it',
        title='TxType',
    )
    transaction: Optional[Transaction4] = Field(
        None,
        description='The Transaction Payload. All the values for Transaction interactions',
        title='Transaction',
    )
    price: Optional[Price4] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Price',
    )
    social: Optional[Social4] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Social',
    )
    mission: Optional[Mission4] = Field(
        None,
        description='The mission Value Payload. All the values for Mission/Quest/Level/Session/Matchmaking/Season interactions',
        title='Mission',
    )
    ad: Optional[Ad4] = Field(
        None,
        description='The Ad Value Payload. All the values for Ad interactions',
        title='Advertisement',
    )
    customRef: Optional[str] = None
    customValue: Optional[float] = None
    customMeta: Optional[Dict[str, Any]] = None


class TypeListEnum4(Enum):
    Resource = 'Resource'
    Item = 'Item'
    Craft = 'Craft'
    Input = 'Input'
    Modifier = 'Modifier'
    Profile = 'Profile'
    Character = 'Character'


class Type13(Enum):
    Probability = 'Probability'
    Quantity = 'Quantity'
    Quality = 'Quality'
    Rate = 'Rate'
    Number = 'Number'
    Percentage = 'Percentage'
    Time = 'Time'


class Type14(Enum):
    Mapping = 'Mapping'
    Leveling = 'Leveling'
    Class = 'Class'
    Time = 'Time'
    Default = 'Default'


class Variation4(BaseModel):
    type: Type14 = Field(
        ...,
        description='Variable Variation Type Whether this is a variation variable',
        title='VariableVariationType',
    )
    key: str
    value: float


class Variable4(BaseModel):
    type: Type13 = Field(
        ...,
        description='Variable Type What kind of value the variable holds',
        title='VariableType',
    )
    key: str
    value: float
    variations: Optional[List[Variation4]] = Field(
        None, description='The list of asset variations values', title='variations'
    )


class LinkedAsset4(BaseModel):
    assetId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    typeList: List[TypeListEnum4] = Field(
        ...,
        description='The list of types that the asset is associated with',
        ge=1.0,
        title='typeList',
        unique_items=True,
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset depends to, in order to be produced',
        title='inputs',
    )
    outputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset can produce',
        title='outputs',
    )
    classification: Optional[str] = Field(
        None, description='Type, eg is Weapon, is Potion', title='classification'
    )
    categories: Optional[List[str]] = Field(
        None, description='eg 1. Melee, 2. Sword', title='categories'
    )
    variables: Optional[List[Variable4]] = Field(None, title='variables')


class LinkedProductItem4(BaseModel):
    productId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sku: Optional[str] = None
    category: Optional[str] = None
    name: Optional[str] = None
    brand: Optional[str] = None
    variant: Optional[str] = None
    quantity: Optional[float] = None
    price: Optional[float] = None
    currency: Optional[str] = None
    imageUri: Optional[str] = None
    uri: Optional[str] = None


class IdentityEvent(BaseModel):
    type: Type12 = Field(
        ...,
        description='Event TypeDescribes the body of the IdentityEventType',
        title='IdentityEventType',
    )
    version: Optional[str] = Field(
        '$LATEST',
        description='The Version reference type (Semver). The type that is used to refer to the eventing version',
    )
    eventId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    appId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    playerId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sessionId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    doTrack: Optional[bool] = True
    expiresAt: Optional[int] = None
    receivedAt: Optional[int] = None
    sentAt: Optional[int] = None
    timestamp: Optional[int] = None
    eventSinceAppstart: Optional[int] = Field(
        0, description='event since app start, 0 if N/A'
    )
    sourceContext: Optional[SourceContext4] = Field(
        None,
        description='Event Source Context record. The Meta Context of the Source for the Eventing payload origins',
        title='EventSourceContextSchema',
    )
    value: Value4 = Field(
        ..., description='The Value Event class', title='The Value payload'
    )
    linkedAssets: Optional[List[LinkedAsset4]] = Field(
        None,
        description='Event Linked Assets. The list of linked assets that are associated with this event',
        title='linkedAssets',
    )
    linkedProduct: Optional[List[LinkedProductItem4]] = Field(
        None,
        description='Event Linked Product. The list of linked Product that are associated with this event',
        title='linkedProduct',
    )


class Type15(Enum):
    Achievement = 'Achievement'
    LevelUp = 'LevelUp'
    Experience = 'Experience'
    Win = 'Win'
    Draw = 'Draw'
    Defeat = 'Defeat'
    Kill = 'Kill'
    Killed = 'Killed'
    Drop = 'Drop'
    Loot = 'Loot'
    HighScore = 'HighScore'
    Build = 'Build'
    Waging = 'Waging'
    Lock = 'Lock'
    Lose = 'Lose'
    Supply = 'Supply'
    Craft = 'Craft'
    Respawn = 'Respawn'
    Spawn = 'Spawn'
    Gathering = 'Gathering'
    Resistance = 'Resistance'
    Gear = 'Gear'
    MapAreaVisit = 'MapAreaVisit'
    MapAreaLeave = 'MapAreaLeave'
    Summon = 'Summon'
    Cast = 'Cast'
    Evolved = 'Evolved'


class App5(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    build: Optional[str] = None
    namespace: Optional[str] = None


class Campaign5(BaseModel):
    name: Optional[str] = None
    affiliate: Optional[str] = None
    provider: Optional[str] = None
    source: Optional[str] = None
    medium: Optional[str] = None
    term: Optional[str] = None
    contentId: Optional[str] = None
    contentType: Optional[str] = None
    creativeUri: Optional[str] = None
    marketingTactic: Optional[str] = None
    group: Optional[str] = None
    uri: Optional[str] = None
    eCPM: Optional[float] = None
    idfv: Optional[str] = None


class Screen5(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None
    density: Optional[float] = None


class Location5(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    continent: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed: Optional[float] = None


class Device5(BaseModel):
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    fullScreen: Optional[bool] = None
    adTrackingEnabled: Optional[bool] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    name: Optional[str] = None
    osName: Optional[str] = None
    osType: Optional[str] = None
    osVersion: Optional[str] = None
    jailbroken: Optional[bool] = None
    token: Optional[str] = None
    ip: Optional[str] = None
    userAgent: Optional[str] = None
    engine: Optional[str] = None
    engineVersion: Optional[str] = None
    client: Optional[str] = None
    locale: Optional[str] = None
    bluetooth: Optional[bool] = None
    carrier: Optional[str] = None
    cellular: Optional[bool] = None
    wifi: Optional[bool] = None
    screen: Optional[Screen5] = Field(
        None,
        description='The Device Screen. The Device Specific Screen properties',
        title='screen',
    )
    location: Optional[Location5] = Field(
        None,
        description='The Device Location. The Device Location meta context',
        title='location',
    )


class Source5(BaseModel):
    worldId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    realmId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    serverId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    shardId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    method: Optional[str] = None
    path: Optional[str] = None
    referrer: Optional[str] = None
    search: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    environment: Optional[str] = None


class Experiment5(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    group: Optional[str] = None
    variation: Optional[str] = None
    uri: Optional[str] = None


class Session5(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    theme: Optional[str] = None
    genre: Optional[str] = None
    level: Optional[float] = None
    progress: Optional[float] = None
    difficulty: Optional[float] = None


class Profile5(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class TargetProfile5(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class Map5(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    level: Optional[float] = None
    position: Optional[float] = None


class SourceContext5(BaseModel):
    app: Optional[App5] = Field(
        None,
        description='The App Context. The App Specific Meta Context',
        title='AppContext',
    )
    campaign: Optional[Campaign5] = Field(
        None,
        description='The Campaign Context. The Campaign Specific Meta Context',
        title='CampaignContext',
    )
    device: Optional[Device5] = Field(
        None,
        description='The Device Context. The Device Specific Meta Context',
        title='DeviceContext',
    )
    source: Optional[Source5] = Field(
        None,
        description='The Source Context. The Eventing Source Meta Context',
        title='SourceContext',
    )
    experiment: Optional[Experiment5] = Field(
        None,
        description='The Experiment Context. The Experiment Specific Meta Context',
        title='ExperimentContext',
    )
    session: Optional[Session5] = Field(
        None,
        description='The Session Context. The Session Specific Meta Context that describes missions, challenges, levels and other session-based experiences',
        title='SessionContext',
    )
    profile: Optional[Profile5] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    targetProfile: Optional[TargetProfile5] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    map: Optional[Map5] = Field(
        None,
        description='The Map Context. The Map Specific Meta Context that describes the in-game area and location',
        title='MapContext',
    )


class Identity5(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    profileId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    wallet: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    anonymous: bool
    username: Optional[str] = None
    email: Optional[str] = None
    plan: Optional[str] = None


class Content5(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class LinkedContent5(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class Prize5(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[float] = None
    level: Optional[float] = None
    amount: Optional[float] = None
    isUnique: Optional[bool] = True
    isItem: Optional[bool] = True
    isCurrency: Optional[bool] = True


class Gear5(BaseModel):
    level: Optional[float] = None
    value: Optional[float] = None
    class_: Optional[str] = Field(None, alias='class')
    isUnique: Optional[bool] = True


class TxType5(BaseModel):
    isAchievementReward: Optional[bool] = True
    isRedeem: Optional[bool] = True
    isReward: Optional[bool] = True
    isAdReward: Optional[bool] = True
    isInappPurchase: Optional[bool] = True
    isRenewal: Optional[bool] = True
    isPurchase: Optional[bool] = True
    isFXTrade: Optional[bool] = True
    isSale: Optional[bool] = True
    isTrade: Optional[bool] = True
    isDrop: Optional[bool] = True
    isLoot: Optional[bool] = True
    isGained: Optional[bool] = True
    isContract: Optional[bool] = True


class Transaction5(BaseModel):
    id: Optional[str] = None
    receipt: Optional[str] = None
    receiptSignature: Optional[str] = None
    transactorId: Optional[str] = None
    transactorName: Optional[str] = None
    transactorType: Optional[str] = None
    receiverId: Optional[str] = None
    receiverName: Optional[str] = None
    receiverType: Optional[str] = None
    network: Optional[str] = None
    checkoutId: Optional[str] = None
    orderId: Optional[str] = None
    storeId: Optional[str] = None
    storeSourceId: Optional[str] = None
    renewalCount: Optional[float] = 0
    feesTotal: Optional[float] = None
    priceTotal: Optional[float] = None
    discountTotal: Optional[float] = None
    quantity: Optional[float] = None
    amount: Optional[float] = None
    currency: Optional[str] = None
    paymentMethod: Optional[str] = None
    paymentProvider: Optional[str] = None
    virtualAmount: Optional[float] = None
    virtualCurrency: Optional[str] = None
    virtualCurrencyType: Optional[str] = None
    blob: Optional[str] = None


class Price5(BaseModel):
    amount: Optional[float] = Field(
        None, description='For either asking or bidding price'
    )
    currency: Optional[str] = None
    currencyType: Optional[str] = None


class Social5(BaseModel):
    recipient: Optional[str] = None
    sender: Optional[str] = None
    groupName: Optional[str] = None
    via: Optional[str] = None
    message: Optional[str] = None
    rating: Optional[str] = None


class Mission5(BaseModel):
    duration: Optional[float] = None
    rank: Optional[float] = None
    rankName: Optional[str] = None
    score: Optional[float] = None
    moves: Optional[float] = None
    remaining: Optional[float] = None


class Ad5(BaseModel):
    publisher: Optional[str] = None
    position: Optional[float] = None
    totalLength: Optional[float] = None
    quartile: Optional[float] = None
    placementId: Optional[str] = None
    placementName: Optional[str] = None


class Value5(BaseModel):
    identity: Optional[Identity5] = Field(
        None,
        description='The identity Value Payload. All the values to keep track of the profile and user',
        title='Identity',
    )
    content: Optional[Content5] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    linkedContent: Optional[LinkedContent5] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    prize: Optional[Prize5] = Field(
        None,
        description='The prize/rewards Value Payload. All the values for prize/rewards-based interactions',
        title='Prize',
    )
    gear: Optional[Gear5] = Field(
        None,
        description='The gear Value Payload. All the values for gear-based acquisition interactions',
        title='Gear',
    )
    txType: Optional[TxType5] = Field(
        None,
        description='The TransactionType. All the values to set what kind of transaction is it',
        title='TxType',
    )
    transaction: Optional[Transaction5] = Field(
        None,
        description='The Transaction Payload. All the values for Transaction interactions',
        title='Transaction',
    )
    price: Optional[Price5] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Price',
    )
    social: Optional[Social5] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Social',
    )
    mission: Optional[Mission5] = Field(
        None,
        description='The mission Value Payload. All the values for Mission/Quest/Level/Session/Matchmaking/Season interactions',
        title='Mission',
    )
    ad: Optional[Ad5] = Field(
        None,
        description='The Ad Value Payload. All the values for Ad interactions',
        title='Advertisement',
    )
    customRef: Optional[str] = None
    customValue: Optional[float] = None
    customMeta: Optional[Dict[str, Any]] = None


class TypeListEnum5(Enum):
    Resource = 'Resource'
    Item = 'Item'
    Craft = 'Craft'
    Input = 'Input'
    Modifier = 'Modifier'
    Profile = 'Profile'
    Character = 'Character'


class Type16(Enum):
    Probability = 'Probability'
    Quantity = 'Quantity'
    Quality = 'Quality'
    Rate = 'Rate'
    Number = 'Number'
    Percentage = 'Percentage'
    Time = 'Time'


class Type17(Enum):
    Mapping = 'Mapping'
    Leveling = 'Leveling'
    Class = 'Class'
    Time = 'Time'
    Default = 'Default'


class Variation5(BaseModel):
    type: Type17 = Field(
        ...,
        description='Variable Variation Type Whether this is a variation variable',
        title='VariableVariationType',
    )
    key: str
    value: float


class Variable5(BaseModel):
    type: Type16 = Field(
        ...,
        description='Variable Type What kind of value the variable holds',
        title='VariableType',
    )
    key: str
    value: float
    variations: Optional[List[Variation5]] = Field(
        None, description='The list of asset variations values', title='variations'
    )


class LinkedAsset5(BaseModel):
    assetId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    typeList: List[TypeListEnum5] = Field(
        ...,
        description='The list of types that the asset is associated with',
        ge=1.0,
        title='typeList',
        unique_items=True,
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset depends to, in order to be produced',
        title='inputs',
    )
    outputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset can produce',
        title='outputs',
    )
    classification: Optional[str] = Field(
        None, description='Type, eg is Weapon, is Potion', title='classification'
    )
    categories: Optional[List[str]] = Field(
        None, description='eg 1. Melee, 2. Sword', title='categories'
    )
    variables: Optional[List[Variable5]] = Field(None, title='variables')


class LinkedProductItem5(BaseModel):
    productId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sku: Optional[str] = None
    category: Optional[str] = None
    name: Optional[str] = None
    brand: Optional[str] = None
    variant: Optional[str] = None
    quantity: Optional[float] = None
    price: Optional[float] = None
    currency: Optional[str] = None
    imageUri: Optional[str] = None
    uri: Optional[str] = None


class InGameEvent(BaseModel):
    type: Type15 = Field(
        ...,
        description='Event TypeDescribes the body of the InGameEventType',
        title='InGameEventType',
    )
    version: Optional[str] = Field(
        '$LATEST',
        description='The Version reference type (Semver). The type that is used to refer to the eventing version',
    )
    eventId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    appId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    playerId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sessionId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    doTrack: Optional[bool] = True
    expiresAt: Optional[int] = None
    receivedAt: Optional[int] = None
    sentAt: Optional[int] = None
    timestamp: Optional[int] = None
    eventSinceAppstart: Optional[int] = Field(
        0, description='event since app start, 0 if N/A'
    )
    sourceContext: Optional[SourceContext5] = Field(
        None,
        description='Event Source Context record. The Meta Context of the Source for the Eventing payload origins',
        title='EventSourceContextSchema',
    )
    value: Value5 = Field(
        ..., description='The Value Event class', title='The Value payload'
    )
    linkedAssets: Optional[List[LinkedAsset5]] = Field(
        None,
        description='Event Linked Assets. The list of linked assets that are associated with this event',
        title='linkedAssets',
    )
    linkedProduct: Optional[List[LinkedProductItem5]] = Field(
        None,
        description='Event Linked Product. The list of linked Product that are associated with this event',
        title='linkedProduct',
    )


class Type18(Enum):
    SessionNew = 'SessionNew'
    SessionStart = 'SessionStart'
    SessionStop = 'SessionStop'
    SessionResult = 'SessionResult'
    SessionRank = 'SessionRank'
    SessionQuit = 'SessionQuit'
    SessionFail = 'SessionFail'
    SessionSkip = 'SessionSkip'
    MissionNew = 'MissionNew'
    MissionStart = 'MissionStart'
    MissionStop = 'MissionStop'
    MissionResult = 'MissionResult'
    MissionRank = 'MissionRank'
    MissionQuit = 'MissionQuit'
    MissionFail = 'MissionFail'
    MissionSkip = 'MissionSkip'
    QuestNew = 'QuestNew'
    QuestStart = 'QuestStart'
    QuestStop = 'QuestStop'
    QuestResult = 'QuestResult'
    QuestRank = 'QuestRank'
    QuestQuit = 'QuestQuit'
    QuestFail = 'QuestFail'
    QuestSkip = 'QuestSkip'
    LevelNew = 'LevelNew'
    LevelStart = 'LevelStart'
    LevelStop = 'LevelStop'
    LevelResult = 'LevelResult'
    LevelRank = 'LevelRank'
    LevelQuit = 'LevelQuit'
    LevelFail = 'LevelFail'
    LevelSkip = 'LevelSkip'
    SeasonNew = 'SeasonNew'
    SeasonStart = 'SeasonStart'
    SeasonStop = 'SeasonStop'
    SeasonResult = 'SeasonResult'
    SeasonRank = 'SeasonRank'
    SeasonQuit = 'SeasonQuit'
    SeasonFail = 'SeasonFail'
    SeasonSkip = 'SeasonSkip'
    MatchmakingNew = 'MatchmakingNew'
    MatchmakingStart = 'MatchmakingStart'
    MatchmakingStop = 'MatchmakingStop'
    MatchmakingResult = 'MatchmakingResult'
    MatchmakingRank = 'MatchmakingRank'
    MatchmakingQuit = 'MatchmakingQuit'
    MatchmakingFail = 'MatchmakingFail'
    MatchmakingSkip = 'MatchmakingSkip'


class App6(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    build: Optional[str] = None
    namespace: Optional[str] = None


class Campaign6(BaseModel):
    name: Optional[str] = None
    affiliate: Optional[str] = None
    provider: Optional[str] = None
    source: Optional[str] = None
    medium: Optional[str] = None
    term: Optional[str] = None
    contentId: Optional[str] = None
    contentType: Optional[str] = None
    creativeUri: Optional[str] = None
    marketingTactic: Optional[str] = None
    group: Optional[str] = None
    uri: Optional[str] = None
    eCPM: Optional[float] = None
    idfv: Optional[str] = None


class Screen6(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None
    density: Optional[float] = None


class Location6(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    continent: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed: Optional[float] = None


class Device6(BaseModel):
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    fullScreen: Optional[bool] = None
    adTrackingEnabled: Optional[bool] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    name: Optional[str] = None
    osName: Optional[str] = None
    osType: Optional[str] = None
    osVersion: Optional[str] = None
    jailbroken: Optional[bool] = None
    token: Optional[str] = None
    ip: Optional[str] = None
    userAgent: Optional[str] = None
    engine: Optional[str] = None
    engineVersion: Optional[str] = None
    client: Optional[str] = None
    locale: Optional[str] = None
    bluetooth: Optional[bool] = None
    carrier: Optional[str] = None
    cellular: Optional[bool] = None
    wifi: Optional[bool] = None
    screen: Optional[Screen6] = Field(
        None,
        description='The Device Screen. The Device Specific Screen properties',
        title='screen',
    )
    location: Optional[Location6] = Field(
        None,
        description='The Device Location. The Device Location meta context',
        title='location',
    )


class Source6(BaseModel):
    worldId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    realmId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    serverId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    shardId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    method: Optional[str] = None
    path: Optional[str] = None
    referrer: Optional[str] = None
    search: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    environment: Optional[str] = None


class Experiment6(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    group: Optional[str] = None
    variation: Optional[str] = None
    uri: Optional[str] = None


class Session6(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    theme: Optional[str] = None
    genre: Optional[str] = None
    level: Optional[float] = None
    progress: Optional[float] = None
    difficulty: Optional[float] = None


class Profile6(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class TargetProfile6(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class Map6(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    level: Optional[float] = None
    position: Optional[float] = None


class SourceContext6(BaseModel):
    app: Optional[App6] = Field(
        None,
        description='The App Context. The App Specific Meta Context',
        title='AppContext',
    )
    campaign: Optional[Campaign6] = Field(
        None,
        description='The Campaign Context. The Campaign Specific Meta Context',
        title='CampaignContext',
    )
    device: Optional[Device6] = Field(
        None,
        description='The Device Context. The Device Specific Meta Context',
        title='DeviceContext',
    )
    source: Optional[Source6] = Field(
        None,
        description='The Source Context. The Eventing Source Meta Context',
        title='SourceContext',
    )
    experiment: Optional[Experiment6] = Field(
        None,
        description='The Experiment Context. The Experiment Specific Meta Context',
        title='ExperimentContext',
    )
    session: Optional[Session6] = Field(
        None,
        description='The Session Context. The Session Specific Meta Context that describes missions, challenges, levels and other session-based experiences',
        title='SessionContext',
    )
    profile: Optional[Profile6] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    targetProfile: Optional[TargetProfile6] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    map: Optional[Map6] = Field(
        None,
        description='The Map Context. The Map Specific Meta Context that describes the in-game area and location',
        title='MapContext',
    )


class Identity6(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    profileId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    wallet: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    anonymous: bool
    username: Optional[str] = None
    email: Optional[str] = None
    plan: Optional[str] = None


class Content6(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class LinkedContent6(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class Prize6(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[float] = None
    level: Optional[float] = None
    amount: Optional[float] = None
    isUnique: Optional[bool] = True
    isItem: Optional[bool] = True
    isCurrency: Optional[bool] = True


class Gear6(BaseModel):
    level: Optional[float] = None
    value: Optional[float] = None
    class_: Optional[str] = Field(None, alias='class')
    isUnique: Optional[bool] = True


class TxType6(BaseModel):
    isAchievementReward: Optional[bool] = True
    isRedeem: Optional[bool] = True
    isReward: Optional[bool] = True
    isAdReward: Optional[bool] = True
    isInappPurchase: Optional[bool] = True
    isRenewal: Optional[bool] = True
    isPurchase: Optional[bool] = True
    isFXTrade: Optional[bool] = True
    isSale: Optional[bool] = True
    isTrade: Optional[bool] = True
    isDrop: Optional[bool] = True
    isLoot: Optional[bool] = True
    isGained: Optional[bool] = True
    isContract: Optional[bool] = True


class Transaction6(BaseModel):
    id: Optional[str] = None
    receipt: Optional[str] = None
    receiptSignature: Optional[str] = None
    transactorId: Optional[str] = None
    transactorName: Optional[str] = None
    transactorType: Optional[str] = None
    receiverId: Optional[str] = None
    receiverName: Optional[str] = None
    receiverType: Optional[str] = None
    network: Optional[str] = None
    checkoutId: Optional[str] = None
    orderId: Optional[str] = None
    storeId: Optional[str] = None
    storeSourceId: Optional[str] = None
    renewalCount: Optional[float] = 0
    feesTotal: Optional[float] = None
    priceTotal: Optional[float] = None
    discountTotal: Optional[float] = None
    quantity: Optional[float] = None
    amount: Optional[float] = None
    currency: Optional[str] = None
    paymentMethod: Optional[str] = None
    paymentProvider: Optional[str] = None
    virtualAmount: Optional[float] = None
    virtualCurrency: Optional[str] = None
    virtualCurrencyType: Optional[str] = None
    blob: Optional[str] = None


class Price6(BaseModel):
    amount: Optional[float] = Field(
        None, description='For either asking or bidding price'
    )
    currency: Optional[str] = None
    currencyType: Optional[str] = None


class Social6(BaseModel):
    recipient: Optional[str] = None
    sender: Optional[str] = None
    groupName: Optional[str] = None
    via: Optional[str] = None
    message: Optional[str] = None
    rating: Optional[str] = None


class Mission6(BaseModel):
    duration: Optional[float] = None
    rank: Optional[float] = None
    rankName: Optional[str] = None
    score: Optional[float] = None
    moves: Optional[float] = None
    remaining: Optional[float] = None


class Ad6(BaseModel):
    publisher: Optional[str] = None
    position: Optional[float] = None
    totalLength: Optional[float] = None
    quartile: Optional[float] = None
    placementId: Optional[str] = None
    placementName: Optional[str] = None


class Value6(BaseModel):
    identity: Optional[Identity6] = Field(
        None,
        description='The identity Value Payload. All the values to keep track of the profile and user',
        title='Identity',
    )
    content: Optional[Content6] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    linkedContent: Optional[LinkedContent6] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    prize: Optional[Prize6] = Field(
        None,
        description='The prize/rewards Value Payload. All the values for prize/rewards-based interactions',
        title='Prize',
    )
    gear: Optional[Gear6] = Field(
        None,
        description='The gear Value Payload. All the values for gear-based acquisition interactions',
        title='Gear',
    )
    txType: Optional[TxType6] = Field(
        None,
        description='The TransactionType. All the values to set what kind of transaction is it',
        title='TxType',
    )
    transaction: Optional[Transaction6] = Field(
        None,
        description='The Transaction Payload. All the values for Transaction interactions',
        title='Transaction',
    )
    price: Optional[Price6] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Price',
    )
    social: Optional[Social6] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Social',
    )
    mission: Optional[Mission6] = Field(
        None,
        description='The mission Value Payload. All the values for Mission/Quest/Level/Session/Matchmaking/Season interactions',
        title='Mission',
    )
    ad: Optional[Ad6] = Field(
        None,
        description='The Ad Value Payload. All the values for Ad interactions',
        title='Advertisement',
    )
    customRef: Optional[str] = None
    customValue: Optional[float] = None
    customMeta: Optional[Dict[str, Any]] = None


class TypeListEnum6(Enum):
    Resource = 'Resource'
    Item = 'Item'
    Craft = 'Craft'
    Input = 'Input'
    Modifier = 'Modifier'
    Profile = 'Profile'
    Character = 'Character'


class Type19(Enum):
    Probability = 'Probability'
    Quantity = 'Quantity'
    Quality = 'Quality'
    Rate = 'Rate'
    Number = 'Number'
    Percentage = 'Percentage'
    Time = 'Time'


class Type20(Enum):
    Mapping = 'Mapping'
    Leveling = 'Leveling'
    Class = 'Class'
    Time = 'Time'
    Default = 'Default'


class Variation6(BaseModel):
    type: Type20 = Field(
        ...,
        description='Variable Variation Type Whether this is a variation variable',
        title='VariableVariationType',
    )
    key: str
    value: float


class Variable6(BaseModel):
    type: Type19 = Field(
        ...,
        description='Variable Type What kind of value the variable holds',
        title='VariableType',
    )
    key: str
    value: float
    variations: Optional[List[Variation6]] = Field(
        None, description='The list of asset variations values', title='variations'
    )


class LinkedAsset6(BaseModel):
    assetId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    typeList: List[TypeListEnum6] = Field(
        ...,
        description='The list of types that the asset is associated with',
        ge=1.0,
        title='typeList',
        unique_items=True,
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset depends to, in order to be produced',
        title='inputs',
    )
    outputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset can produce',
        title='outputs',
    )
    classification: Optional[str] = Field(
        None, description='Type, eg is Weapon, is Potion', title='classification'
    )
    categories: Optional[List[str]] = Field(
        None, description='eg 1. Melee, 2. Sword', title='categories'
    )
    variables: Optional[List[Variable6]] = Field(None, title='variables')


class LinkedProductItem6(BaseModel):
    productId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sku: Optional[str] = None
    category: Optional[str] = None
    name: Optional[str] = None
    brand: Optional[str] = None
    variant: Optional[str] = None
    quantity: Optional[float] = None
    price: Optional[float] = None
    currency: Optional[str] = None
    imageUri: Optional[str] = None
    uri: Optional[str] = None


class InGameSessionEvent(BaseModel):
    type: Type18 = Field(
        ...,
        description='Event TypeDescribes the body of the InGameSessionEventType',
        title='InGameSessionEventType',
    )
    version: Optional[str] = Field(
        '$LATEST',
        description='The Version reference type (Semver). The type that is used to refer to the eventing version',
    )
    eventId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    appId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    playerId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sessionId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    doTrack: Optional[bool] = True
    expiresAt: Optional[int] = None
    receivedAt: Optional[int] = None
    sentAt: Optional[int] = None
    timestamp: Optional[int] = None
    eventSinceAppstart: Optional[int] = Field(
        0, description='event since app start, 0 if N/A'
    )
    sourceContext: Optional[SourceContext6] = Field(
        None,
        description='Event Source Context record. The Meta Context of the Source for the Eventing payload origins',
        title='EventSourceContextSchema',
    )
    value: Value6 = Field(
        ..., description='The Value Event class', title='The Value payload'
    )
    linkedAssets: Optional[List[LinkedAsset6]] = Field(
        None,
        description='Event Linked Assets. The list of linked assets that are associated with this event',
        title='linkedAssets',
    )
    linkedProduct: Optional[List[LinkedProductItem6]] = Field(
        None,
        description='Event Linked Product. The list of linked Product that are associated with this event',
        title='linkedProduct',
    )


class Type21(Enum):
    ConversationNew = 'ConversationNew'
    ConversationJoin = 'ConversationJoin'
    ConversationLeave = 'ConversationLeave'
    ConversationMsgSent = 'ConversationMsgSent'
    ChannelNew = 'ChannelNew'
    ChannelJoin = 'ChannelJoin'
    ChannelLeave = 'ChannelLeave'
    ChannelMsgSent = 'ChannelMsgSent'
    GuildNew = 'GuildNew'
    GuildJoin = 'GuildJoin'
    GuildLeave = 'GuildLeave'
    GuildMsgSent = 'GuildMsgSent'
    GroupNew = 'GroupNew'
    GroupJoin = 'GroupJoin'
    GroupLeave = 'GroupLeave'
    GroupMsgSent = 'GroupMsgSent'
    PartyNew = 'PartyNew'
    PartyJoin = 'PartyJoin'
    PartyLeave = 'PartyLeave'
    PartyMsgSent = 'PartyMsgSent'


class App7(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    build: Optional[str] = None
    namespace: Optional[str] = None


class Campaign7(BaseModel):
    name: Optional[str] = None
    affiliate: Optional[str] = None
    provider: Optional[str] = None
    source: Optional[str] = None
    medium: Optional[str] = None
    term: Optional[str] = None
    contentId: Optional[str] = None
    contentType: Optional[str] = None
    creativeUri: Optional[str] = None
    marketingTactic: Optional[str] = None
    group: Optional[str] = None
    uri: Optional[str] = None
    eCPM: Optional[float] = None
    idfv: Optional[str] = None


class Screen7(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None
    density: Optional[float] = None


class Location7(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    continent: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed: Optional[float] = None


class Device7(BaseModel):
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    fullScreen: Optional[bool] = None
    adTrackingEnabled: Optional[bool] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    name: Optional[str] = None
    osName: Optional[str] = None
    osType: Optional[str] = None
    osVersion: Optional[str] = None
    jailbroken: Optional[bool] = None
    token: Optional[str] = None
    ip: Optional[str] = None
    userAgent: Optional[str] = None
    engine: Optional[str] = None
    engineVersion: Optional[str] = None
    client: Optional[str] = None
    locale: Optional[str] = None
    bluetooth: Optional[bool] = None
    carrier: Optional[str] = None
    cellular: Optional[bool] = None
    wifi: Optional[bool] = None
    screen: Optional[Screen7] = Field(
        None,
        description='The Device Screen. The Device Specific Screen properties',
        title='screen',
    )
    location: Optional[Location7] = Field(
        None,
        description='The Device Location. The Device Location meta context',
        title='location',
    )


class Source7(BaseModel):
    worldId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    realmId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    serverId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    shardId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    method: Optional[str] = None
    path: Optional[str] = None
    referrer: Optional[str] = None
    search: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    environment: Optional[str] = None


class Experiment7(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    group: Optional[str] = None
    variation: Optional[str] = None
    uri: Optional[str] = None


class Session7(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    theme: Optional[str] = None
    genre: Optional[str] = None
    level: Optional[float] = None
    progress: Optional[float] = None
    difficulty: Optional[float] = None


class Profile7(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class TargetProfile7(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class Map7(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    level: Optional[float] = None
    position: Optional[float] = None


class SourceContext7(BaseModel):
    app: Optional[App7] = Field(
        None,
        description='The App Context. The App Specific Meta Context',
        title='AppContext',
    )
    campaign: Optional[Campaign7] = Field(
        None,
        description='The Campaign Context. The Campaign Specific Meta Context',
        title='CampaignContext',
    )
    device: Optional[Device7] = Field(
        None,
        description='The Device Context. The Device Specific Meta Context',
        title='DeviceContext',
    )
    source: Optional[Source7] = Field(
        None,
        description='The Source Context. The Eventing Source Meta Context',
        title='SourceContext',
    )
    experiment: Optional[Experiment7] = Field(
        None,
        description='The Experiment Context. The Experiment Specific Meta Context',
        title='ExperimentContext',
    )
    session: Optional[Session7] = Field(
        None,
        description='The Session Context. The Session Specific Meta Context that describes missions, challenges, levels and other session-based experiences',
        title='SessionContext',
    )
    profile: Optional[Profile7] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    targetProfile: Optional[TargetProfile7] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    map: Optional[Map7] = Field(
        None,
        description='The Map Context. The Map Specific Meta Context that describes the in-game area and location',
        title='MapContext',
    )


class Identity7(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    profileId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    wallet: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    anonymous: bool
    username: Optional[str] = None
    email: Optional[str] = None
    plan: Optional[str] = None


class Content7(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class LinkedContent7(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class Prize7(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[float] = None
    level: Optional[float] = None
    amount: Optional[float] = None
    isUnique: Optional[bool] = True
    isItem: Optional[bool] = True
    isCurrency: Optional[bool] = True


class Gear7(BaseModel):
    level: Optional[float] = None
    value: Optional[float] = None
    class_: Optional[str] = Field(None, alias='class')
    isUnique: Optional[bool] = True


class TxType7(BaseModel):
    isAchievementReward: Optional[bool] = True
    isRedeem: Optional[bool] = True
    isReward: Optional[bool] = True
    isAdReward: Optional[bool] = True
    isInappPurchase: Optional[bool] = True
    isRenewal: Optional[bool] = True
    isPurchase: Optional[bool] = True
    isFXTrade: Optional[bool] = True
    isSale: Optional[bool] = True
    isTrade: Optional[bool] = True
    isDrop: Optional[bool] = True
    isLoot: Optional[bool] = True
    isGained: Optional[bool] = True
    isContract: Optional[bool] = True


class Transaction7(BaseModel):
    id: Optional[str] = None
    receipt: Optional[str] = None
    receiptSignature: Optional[str] = None
    transactorId: Optional[str] = None
    transactorName: Optional[str] = None
    transactorType: Optional[str] = None
    receiverId: Optional[str] = None
    receiverName: Optional[str] = None
    receiverType: Optional[str] = None
    network: Optional[str] = None
    checkoutId: Optional[str] = None
    orderId: Optional[str] = None
    storeId: Optional[str] = None
    storeSourceId: Optional[str] = None
    renewalCount: Optional[float] = 0
    feesTotal: Optional[float] = None
    priceTotal: Optional[float] = None
    discountTotal: Optional[float] = None
    quantity: Optional[float] = None
    amount: Optional[float] = None
    currency: Optional[str] = None
    paymentMethod: Optional[str] = None
    paymentProvider: Optional[str] = None
    virtualAmount: Optional[float] = None
    virtualCurrency: Optional[str] = None
    virtualCurrencyType: Optional[str] = None
    blob: Optional[str] = None


class Price7(BaseModel):
    amount: Optional[float] = Field(
        None, description='For either asking or bidding price'
    )
    currency: Optional[str] = None
    currencyType: Optional[str] = None


class Social7(BaseModel):
    recipient: Optional[str] = None
    sender: Optional[str] = None
    groupName: Optional[str] = None
    via: Optional[str] = None
    message: Optional[str] = None
    rating: Optional[str] = None


class Mission7(BaseModel):
    duration: Optional[float] = None
    rank: Optional[float] = None
    rankName: Optional[str] = None
    score: Optional[float] = None
    moves: Optional[float] = None
    remaining: Optional[float] = None


class Ad7(BaseModel):
    publisher: Optional[str] = None
    position: Optional[float] = None
    totalLength: Optional[float] = None
    quartile: Optional[float] = None
    placementId: Optional[str] = None
    placementName: Optional[str] = None


class Value7(BaseModel):
    identity: Optional[Identity7] = Field(
        None,
        description='The identity Value Payload. All the values to keep track of the profile and user',
        title='Identity',
    )
    content: Optional[Content7] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    linkedContent: Optional[LinkedContent7] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    prize: Optional[Prize7] = Field(
        None,
        description='The prize/rewards Value Payload. All the values for prize/rewards-based interactions',
        title='Prize',
    )
    gear: Optional[Gear7] = Field(
        None,
        description='The gear Value Payload. All the values for gear-based acquisition interactions',
        title='Gear',
    )
    txType: Optional[TxType7] = Field(
        None,
        description='The TransactionType. All the values to set what kind of transaction is it',
        title='TxType',
    )
    transaction: Optional[Transaction7] = Field(
        None,
        description='The Transaction Payload. All the values for Transaction interactions',
        title='Transaction',
    )
    price: Optional[Price7] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Price',
    )
    social: Optional[Social7] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Social',
    )
    mission: Optional[Mission7] = Field(
        None,
        description='The mission Value Payload. All the values for Mission/Quest/Level/Session/Matchmaking/Season interactions',
        title='Mission',
    )
    ad: Optional[Ad7] = Field(
        None,
        description='The Ad Value Payload. All the values for Ad interactions',
        title='Advertisement',
    )
    customRef: Optional[str] = None
    customValue: Optional[float] = None
    customMeta: Optional[Dict[str, Any]] = None


class TypeListEnum7(Enum):
    Resource = 'Resource'
    Item = 'Item'
    Craft = 'Craft'
    Input = 'Input'
    Modifier = 'Modifier'
    Profile = 'Profile'
    Character = 'Character'


class Type22(Enum):
    Probability = 'Probability'
    Quantity = 'Quantity'
    Quality = 'Quality'
    Rate = 'Rate'
    Number = 'Number'
    Percentage = 'Percentage'
    Time = 'Time'


class Type23(Enum):
    Mapping = 'Mapping'
    Leveling = 'Leveling'
    Class = 'Class'
    Time = 'Time'
    Default = 'Default'


class Variation7(BaseModel):
    type: Type23 = Field(
        ...,
        description='Variable Variation Type Whether this is a variation variable',
        title='VariableVariationType',
    )
    key: str
    value: float


class Variable7(BaseModel):
    type: Type22 = Field(
        ...,
        description='Variable Type What kind of value the variable holds',
        title='VariableType',
    )
    key: str
    value: float
    variations: Optional[List[Variation7]] = Field(
        None, description='The list of asset variations values', title='variations'
    )


class LinkedAsset7(BaseModel):
    assetId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    typeList: List[TypeListEnum7] = Field(
        ...,
        description='The list of types that the asset is associated with',
        ge=1.0,
        title='typeList',
        unique_items=True,
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset depends to, in order to be produced',
        title='inputs',
    )
    outputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset can produce',
        title='outputs',
    )
    classification: Optional[str] = Field(
        None, description='Type, eg is Weapon, is Potion', title='classification'
    )
    categories: Optional[List[str]] = Field(
        None, description='eg 1. Melee, 2. Sword', title='categories'
    )
    variables: Optional[List[Variable7]] = Field(None, title='variables')


class LinkedProductItem7(BaseModel):
    productId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sku: Optional[str] = None
    category: Optional[str] = None
    name: Optional[str] = None
    brand: Optional[str] = None
    variant: Optional[str] = None
    quantity: Optional[float] = None
    price: Optional[float] = None
    currency: Optional[str] = None
    imageUri: Optional[str] = None
    uri: Optional[str] = None


class InGameSocialEvent(BaseModel):
    type: Type21 = Field(
        ...,
        description='Event TypeDescribes the body of the InGameSocialEventType',
        title='InGameSocialEventType',
    )
    version: Optional[str] = Field(
        '$LATEST',
        description='The Version reference type (Semver). The type that is used to refer to the eventing version',
    )
    eventId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    appId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    playerId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sessionId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    doTrack: Optional[bool] = True
    expiresAt: Optional[int] = None
    receivedAt: Optional[int] = None
    sentAt: Optional[int] = None
    timestamp: Optional[int] = None
    eventSinceAppstart: Optional[int] = Field(
        0, description='event since app start, 0 if N/A'
    )
    sourceContext: Optional[SourceContext7] = Field(
        None,
        description='Event Source Context record. The Meta Context of the Source for the Eventing payload origins',
        title='EventSourceContextSchema',
    )
    value: Value7 = Field(
        ..., description='The Value Event class', title='The Value payload'
    )
    linkedAssets: Optional[List[LinkedAsset7]] = Field(
        None,
        description='Event Linked Assets. The list of linked assets that are associated with this event',
        title='linkedAssets',
    )
    linkedProduct: Optional[List[LinkedProductItem7]] = Field(
        None,
        description='Event Linked Product. The list of linked Product that are associated with this event',
        title='linkedProduct',
    )


class Type24(Enum):
    StoreOpened = 'StoreOpened'
    StoreItemClick = 'StoreItemClick'
    ItemAcquired = 'ItemAcquired'
    ItemSpent = 'ItemSpent'
    ChampionAcquired = 'ChampionAcquired'
    SkinAcquired = 'SkinAcquired'
    VariationAcquired = 'VariationAcquired'


class App8(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    build: Optional[str] = None
    namespace: Optional[str] = None


class Campaign8(BaseModel):
    name: Optional[str] = None
    affiliate: Optional[str] = None
    provider: Optional[str] = None
    source: Optional[str] = None
    medium: Optional[str] = None
    term: Optional[str] = None
    contentId: Optional[str] = None
    contentType: Optional[str] = None
    creativeUri: Optional[str] = None
    marketingTactic: Optional[str] = None
    group: Optional[str] = None
    uri: Optional[str] = None
    eCPM: Optional[float] = None
    idfv: Optional[str] = None


class Screen8(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None
    density: Optional[float] = None


class Location8(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    continent: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed: Optional[float] = None


class Device8(BaseModel):
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    fullScreen: Optional[bool] = None
    adTrackingEnabled: Optional[bool] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    name: Optional[str] = None
    osName: Optional[str] = None
    osType: Optional[str] = None
    osVersion: Optional[str] = None
    jailbroken: Optional[bool] = None
    token: Optional[str] = None
    ip: Optional[str] = None
    userAgent: Optional[str] = None
    engine: Optional[str] = None
    engineVersion: Optional[str] = None
    client: Optional[str] = None
    locale: Optional[str] = None
    bluetooth: Optional[bool] = None
    carrier: Optional[str] = None
    cellular: Optional[bool] = None
    wifi: Optional[bool] = None
    screen: Optional[Screen8] = Field(
        None,
        description='The Device Screen. The Device Specific Screen properties',
        title='screen',
    )
    location: Optional[Location8] = Field(
        None,
        description='The Device Location. The Device Location meta context',
        title='location',
    )


class Source8(BaseModel):
    worldId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    realmId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    serverId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    shardId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    method: Optional[str] = None
    path: Optional[str] = None
    referrer: Optional[str] = None
    search: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    environment: Optional[str] = None


class Experiment8(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    group: Optional[str] = None
    variation: Optional[str] = None
    uri: Optional[str] = None


class Session8(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    theme: Optional[str] = None
    genre: Optional[str] = None
    level: Optional[float] = None
    progress: Optional[float] = None
    difficulty: Optional[float] = None


class Profile8(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class TargetProfile8(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class Map8(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    level: Optional[float] = None
    position: Optional[float] = None


class SourceContext8(BaseModel):
    app: Optional[App8] = Field(
        None,
        description='The App Context. The App Specific Meta Context',
        title='AppContext',
    )
    campaign: Optional[Campaign8] = Field(
        None,
        description='The Campaign Context. The Campaign Specific Meta Context',
        title='CampaignContext',
    )
    device: Optional[Device8] = Field(
        None,
        description='The Device Context. The Device Specific Meta Context',
        title='DeviceContext',
    )
    source: Optional[Source8] = Field(
        None,
        description='The Source Context. The Eventing Source Meta Context',
        title='SourceContext',
    )
    experiment: Optional[Experiment8] = Field(
        None,
        description='The Experiment Context. The Experiment Specific Meta Context',
        title='ExperimentContext',
    )
    session: Optional[Session8] = Field(
        None,
        description='The Session Context. The Session Specific Meta Context that describes missions, challenges, levels and other session-based experiences',
        title='SessionContext',
    )
    profile: Optional[Profile8] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    targetProfile: Optional[TargetProfile8] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    map: Optional[Map8] = Field(
        None,
        description='The Map Context. The Map Specific Meta Context that describes the in-game area and location',
        title='MapContext',
    )


class Identity8(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    profileId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    wallet: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    anonymous: bool
    username: Optional[str] = None
    email: Optional[str] = None
    plan: Optional[str] = None


class Content8(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class LinkedContent8(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class Prize8(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[float] = None
    level: Optional[float] = None
    amount: Optional[float] = None
    isUnique: Optional[bool] = True
    isItem: Optional[bool] = True
    isCurrency: Optional[bool] = True


class Gear8(BaseModel):
    level: Optional[float] = None
    value: Optional[float] = None
    class_: Optional[str] = Field(None, alias='class')
    isUnique: Optional[bool] = True


class TxType8(BaseModel):
    isAchievementReward: Optional[bool] = True
    isRedeem: Optional[bool] = True
    isReward: Optional[bool] = True
    isAdReward: Optional[bool] = True
    isInappPurchase: Optional[bool] = True
    isRenewal: Optional[bool] = True
    isPurchase: Optional[bool] = True
    isFXTrade: Optional[bool] = True
    isSale: Optional[bool] = True
    isTrade: Optional[bool] = True
    isDrop: Optional[bool] = True
    isLoot: Optional[bool] = True
    isGained: Optional[bool] = True
    isContract: Optional[bool] = True


class Transaction8(BaseModel):
    id: Optional[str] = None
    receipt: Optional[str] = None
    receiptSignature: Optional[str] = None
    transactorId: Optional[str] = None
    transactorName: Optional[str] = None
    transactorType: Optional[str] = None
    receiverId: Optional[str] = None
    receiverName: Optional[str] = None
    receiverType: Optional[str] = None
    network: Optional[str] = None
    checkoutId: Optional[str] = None
    orderId: Optional[str] = None
    storeId: Optional[str] = None
    storeSourceId: Optional[str] = None
    renewalCount: Optional[float] = 0
    feesTotal: Optional[float] = None
    priceTotal: Optional[float] = None
    discountTotal: Optional[float] = None
    quantity: Optional[float] = None
    amount: Optional[float] = None
    currency: Optional[str] = None
    paymentMethod: Optional[str] = None
    paymentProvider: Optional[str] = None
    virtualAmount: Optional[float] = None
    virtualCurrency: Optional[str] = None
    virtualCurrencyType: Optional[str] = None
    blob: Optional[str] = None


class Price8(BaseModel):
    amount: Optional[float] = Field(
        None, description='For either asking or bidding price'
    )
    currency: Optional[str] = None
    currencyType: Optional[str] = None


class Social8(BaseModel):
    recipient: Optional[str] = None
    sender: Optional[str] = None
    groupName: Optional[str] = None
    via: Optional[str] = None
    message: Optional[str] = None
    rating: Optional[str] = None


class Mission8(BaseModel):
    duration: Optional[float] = None
    rank: Optional[float] = None
    rankName: Optional[str] = None
    score: Optional[float] = None
    moves: Optional[float] = None
    remaining: Optional[float] = None


class Ad8(BaseModel):
    publisher: Optional[str] = None
    position: Optional[float] = None
    totalLength: Optional[float] = None
    quartile: Optional[float] = None
    placementId: Optional[str] = None
    placementName: Optional[str] = None


class Value8(BaseModel):
    identity: Optional[Identity8] = Field(
        None,
        description='The identity Value Payload. All the values to keep track of the profile and user',
        title='Identity',
    )
    content: Optional[Content8] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    linkedContent: Optional[LinkedContent8] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    prize: Optional[Prize8] = Field(
        None,
        description='The prize/rewards Value Payload. All the values for prize/rewards-based interactions',
        title='Prize',
    )
    gear: Optional[Gear8] = Field(
        None,
        description='The gear Value Payload. All the values for gear-based acquisition interactions',
        title='Gear',
    )
    txType: Optional[TxType8] = Field(
        None,
        description='The TransactionType. All the values to set what kind of transaction is it',
        title='TxType',
    )
    transaction: Optional[Transaction8] = Field(
        None,
        description='The Transaction Payload. All the values for Transaction interactions',
        title='Transaction',
    )
    price: Optional[Price8] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Price',
    )
    social: Optional[Social8] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Social',
    )
    mission: Optional[Mission8] = Field(
        None,
        description='The mission Value Payload. All the values for Mission/Quest/Level/Session/Matchmaking/Season interactions',
        title='Mission',
    )
    ad: Optional[Ad8] = Field(
        None,
        description='The Ad Value Payload. All the values for Ad interactions',
        title='Advertisement',
    )
    customRef: Optional[str] = None
    customValue: Optional[float] = None
    customMeta: Optional[Dict[str, Any]] = None


class TypeListEnum8(Enum):
    Resource = 'Resource'
    Item = 'Item'
    Craft = 'Craft'
    Input = 'Input'
    Modifier = 'Modifier'
    Profile = 'Profile'
    Character = 'Character'


class Type25(Enum):
    Probability = 'Probability'
    Quantity = 'Quantity'
    Quality = 'Quality'
    Rate = 'Rate'
    Number = 'Number'
    Percentage = 'Percentage'
    Time = 'Time'


class Type26(Enum):
    Mapping = 'Mapping'
    Leveling = 'Leveling'
    Class = 'Class'
    Time = 'Time'
    Default = 'Default'


class Variation8(BaseModel):
    type: Type26 = Field(
        ...,
        description='Variable Variation Type Whether this is a variation variable',
        title='VariableVariationType',
    )
    key: str
    value: float


class Variable8(BaseModel):
    type: Type25 = Field(
        ...,
        description='Variable Type What kind of value the variable holds',
        title='VariableType',
    )
    key: str
    value: float
    variations: Optional[List[Variation8]] = Field(
        None, description='The list of asset variations values', title='variations'
    )


class LinkedAsset8(BaseModel):
    assetId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    typeList: List[TypeListEnum8] = Field(
        ...,
        description='The list of types that the asset is associated with',
        ge=1.0,
        title='typeList',
        unique_items=True,
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset depends to, in order to be produced',
        title='inputs',
    )
    outputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset can produce',
        title='outputs',
    )
    classification: Optional[str] = Field(
        None, description='Type, eg is Weapon, is Potion', title='classification'
    )
    categories: Optional[List[str]] = Field(
        None, description='eg 1. Melee, 2. Sword', title='categories'
    )
    variables: Optional[List[Variable8]] = Field(None, title='variables')


class LinkedProductItem8(BaseModel):
    productId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sku: Optional[str] = None
    category: Optional[str] = None
    name: Optional[str] = None
    brand: Optional[str] = None
    variant: Optional[str] = None
    quantity: Optional[float] = None
    price: Optional[float] = None
    currency: Optional[str] = None
    imageUri: Optional[str] = None
    uri: Optional[str] = None


class InGameStoreEvent(BaseModel):
    type: Type24 = Field(
        ...,
        description='Event TypeDescribes the body of the InGameStoreEventType',
        title='InGameStoreEventType',
    )
    version: Optional[str] = Field(
        '$LATEST',
        description='The Version reference type (Semver). The type that is used to refer to the eventing version',
    )
    eventId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    appId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    playerId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sessionId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    doTrack: Optional[bool] = True
    expiresAt: Optional[int] = None
    receivedAt: Optional[int] = None
    sentAt: Optional[int] = None
    timestamp: Optional[int] = None
    eventSinceAppstart: Optional[int] = Field(
        0, description='event since app start, 0 if N/A'
    )
    sourceContext: Optional[SourceContext8] = Field(
        None,
        description='Event Source Context record. The Meta Context of the Source for the Eventing payload origins',
        title='EventSourceContextSchema',
    )
    value: Value8 = Field(
        ..., description='The Value Event class', title='The Value payload'
    )
    linkedAssets: Optional[List[LinkedAsset8]] = Field(
        None,
        description='Event Linked Assets. The list of linked assets that are associated with this event',
        title='linkedAssets',
    )
    linkedProduct: Optional[List[LinkedProductItem8]] = Field(
        None,
        description='Event Linked Product. The list of linked Product that are associated with this event',
        title='linkedProduct',
    )


class Type27(Enum):
    Connect = 'Connect'
    Deploy = 'Deploy'
    Stream = 'Stream'


class App9(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    build: Optional[str] = None
    namespace: Optional[str] = None


class Campaign9(BaseModel):
    name: Optional[str] = None
    affiliate: Optional[str] = None
    provider: Optional[str] = None
    source: Optional[str] = None
    medium: Optional[str] = None
    term: Optional[str] = None
    contentId: Optional[str] = None
    contentType: Optional[str] = None
    creativeUri: Optional[str] = None
    marketingTactic: Optional[str] = None
    group: Optional[str] = None
    uri: Optional[str] = None
    eCPM: Optional[float] = None
    idfv: Optional[str] = None


class Screen9(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None
    density: Optional[float] = None


class Location9(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    continent: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed: Optional[float] = None


class Device9(BaseModel):
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    fullScreen: Optional[bool] = None
    adTrackingEnabled: Optional[bool] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    name: Optional[str] = None
    osName: Optional[str] = None
    osType: Optional[str] = None
    osVersion: Optional[str] = None
    jailbroken: Optional[bool] = None
    token: Optional[str] = None
    ip: Optional[str] = None
    userAgent: Optional[str] = None
    engine: Optional[str] = None
    engineVersion: Optional[str] = None
    client: Optional[str] = None
    locale: Optional[str] = None
    bluetooth: Optional[bool] = None
    carrier: Optional[str] = None
    cellular: Optional[bool] = None
    wifi: Optional[bool] = None
    screen: Optional[Screen9] = Field(
        None,
        description='The Device Screen. The Device Specific Screen properties',
        title='screen',
    )
    location: Optional[Location9] = Field(
        None,
        description='The Device Location. The Device Location meta context',
        title='location',
    )


class Source9(BaseModel):
    worldId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    realmId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    serverId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    shardId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    method: Optional[str] = None
    path: Optional[str] = None
    referrer: Optional[str] = None
    search: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    environment: Optional[str] = None


class Experiment9(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    group: Optional[str] = None
    variation: Optional[str] = None
    uri: Optional[str] = None


class Session9(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    theme: Optional[str] = None
    genre: Optional[str] = None
    level: Optional[float] = None
    progress: Optional[float] = None
    difficulty: Optional[float] = None


class Profile9(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class TargetProfile9(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class Map9(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    level: Optional[float] = None
    position: Optional[float] = None


class SourceContext9(BaseModel):
    app: Optional[App9] = Field(
        None,
        description='The App Context. The App Specific Meta Context',
        title='AppContext',
    )
    campaign: Optional[Campaign9] = Field(
        None,
        description='The Campaign Context. The Campaign Specific Meta Context',
        title='CampaignContext',
    )
    device: Optional[Device9] = Field(
        None,
        description='The Device Context. The Device Specific Meta Context',
        title='DeviceContext',
    )
    source: Optional[Source9] = Field(
        None,
        description='The Source Context. The Eventing Source Meta Context',
        title='SourceContext',
    )
    experiment: Optional[Experiment9] = Field(
        None,
        description='The Experiment Context. The Experiment Specific Meta Context',
        title='ExperimentContext',
    )
    session: Optional[Session9] = Field(
        None,
        description='The Session Context. The Session Specific Meta Context that describes missions, challenges, levels and other session-based experiences',
        title='SessionContext',
    )
    profile: Optional[Profile9] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    targetProfile: Optional[TargetProfile9] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    map: Optional[Map9] = Field(
        None,
        description='The Map Context. The Map Specific Meta Context that describes the in-game area and location',
        title='MapContext',
    )


class Identity9(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    profileId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    wallet: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    anonymous: bool
    username: Optional[str] = None
    email: Optional[str] = None
    plan: Optional[str] = None


class Content9(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class LinkedContent9(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class Prize9(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[float] = None
    level: Optional[float] = None
    amount: Optional[float] = None
    isUnique: Optional[bool] = True
    isItem: Optional[bool] = True
    isCurrency: Optional[bool] = True


class Gear9(BaseModel):
    level: Optional[float] = None
    value: Optional[float] = None
    class_: Optional[str] = Field(None, alias='class')
    isUnique: Optional[bool] = True


class TxType9(BaseModel):
    isAchievementReward: Optional[bool] = True
    isRedeem: Optional[bool] = True
    isReward: Optional[bool] = True
    isAdReward: Optional[bool] = True
    isInappPurchase: Optional[bool] = True
    isRenewal: Optional[bool] = True
    isPurchase: Optional[bool] = True
    isFXTrade: Optional[bool] = True
    isSale: Optional[bool] = True
    isTrade: Optional[bool] = True
    isDrop: Optional[bool] = True
    isLoot: Optional[bool] = True
    isGained: Optional[bool] = True
    isContract: Optional[bool] = True


class Transaction9(BaseModel):
    id: Optional[str] = None
    receipt: Optional[str] = None
    receiptSignature: Optional[str] = None
    transactorId: Optional[str] = None
    transactorName: Optional[str] = None
    transactorType: Optional[str] = None
    receiverId: Optional[str] = None
    receiverName: Optional[str] = None
    receiverType: Optional[str] = None
    network: Optional[str] = None
    checkoutId: Optional[str] = None
    orderId: Optional[str] = None
    storeId: Optional[str] = None
    storeSourceId: Optional[str] = None
    renewalCount: Optional[float] = 0
    feesTotal: Optional[float] = None
    priceTotal: Optional[float] = None
    discountTotal: Optional[float] = None
    quantity: Optional[float] = None
    amount: Optional[float] = None
    currency: Optional[str] = None
    paymentMethod: Optional[str] = None
    paymentProvider: Optional[str] = None
    virtualAmount: Optional[float] = None
    virtualCurrency: Optional[str] = None
    virtualCurrencyType: Optional[str] = None
    blob: Optional[str] = None


class Price9(BaseModel):
    amount: Optional[float] = Field(
        None, description='For either asking or bidding price'
    )
    currency: Optional[str] = None
    currencyType: Optional[str] = None


class Social9(BaseModel):
    recipient: Optional[str] = None
    sender: Optional[str] = None
    groupName: Optional[str] = None
    via: Optional[str] = None
    message: Optional[str] = None
    rating: Optional[str] = None


class Mission9(BaseModel):
    duration: Optional[float] = None
    rank: Optional[float] = None
    rankName: Optional[str] = None
    score: Optional[float] = None
    moves: Optional[float] = None
    remaining: Optional[float] = None


class Ad9(BaseModel):
    publisher: Optional[str] = None
    position: Optional[float] = None
    totalLength: Optional[float] = None
    quartile: Optional[float] = None
    placementId: Optional[str] = None
    placementName: Optional[str] = None


class Value9(BaseModel):
    identity: Optional[Identity9] = Field(
        None,
        description='The identity Value Payload. All the values to keep track of the profile and user',
        title='Identity',
    )
    content: Optional[Content9] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    linkedContent: Optional[LinkedContent9] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    prize: Optional[Prize9] = Field(
        None,
        description='The prize/rewards Value Payload. All the values for prize/rewards-based interactions',
        title='Prize',
    )
    gear: Optional[Gear9] = Field(
        None,
        description='The gear Value Payload. All the values for gear-based acquisition interactions',
        title='Gear',
    )
    txType: Optional[TxType9] = Field(
        None,
        description='The TransactionType. All the values to set what kind of transaction is it',
        title='TxType',
    )
    transaction: Optional[Transaction9] = Field(
        None,
        description='The Transaction Payload. All the values for Transaction interactions',
        title='Transaction',
    )
    price: Optional[Price9] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Price',
    )
    social: Optional[Social9] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Social',
    )
    mission: Optional[Mission9] = Field(
        None,
        description='The mission Value Payload. All the values for Mission/Quest/Level/Session/Matchmaking/Season interactions',
        title='Mission',
    )
    ad: Optional[Ad9] = Field(
        None,
        description='The Ad Value Payload. All the values for Ad interactions',
        title='Advertisement',
    )
    customRef: Optional[str] = None
    customValue: Optional[float] = None
    customMeta: Optional[Dict[str, Any]] = None


class TypeListEnum9(Enum):
    Resource = 'Resource'
    Item = 'Item'
    Craft = 'Craft'
    Input = 'Input'
    Modifier = 'Modifier'
    Profile = 'Profile'
    Character = 'Character'


class Type28(Enum):
    Probability = 'Probability'
    Quantity = 'Quantity'
    Quality = 'Quality'
    Rate = 'Rate'
    Number = 'Number'
    Percentage = 'Percentage'
    Time = 'Time'


class Type29(Enum):
    Mapping = 'Mapping'
    Leveling = 'Leveling'
    Class = 'Class'
    Time = 'Time'
    Default = 'Default'


class Variation9(BaseModel):
    type: Type29 = Field(
        ...,
        description='Variable Variation Type Whether this is a variation variable',
        title='VariableVariationType',
    )
    key: str
    value: float


class Variable9(BaseModel):
    type: Type28 = Field(
        ...,
        description='Variable Type What kind of value the variable holds',
        title='VariableType',
    )
    key: str
    value: float
    variations: Optional[List[Variation9]] = Field(
        None, description='The list of asset variations values', title='variations'
    )


class LinkedAsset9(BaseModel):
    assetId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    typeList: List[TypeListEnum9] = Field(
        ...,
        description='The list of types that the asset is associated with',
        ge=1.0,
        title='typeList',
        unique_items=True,
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset depends to, in order to be produced',
        title='inputs',
    )
    outputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset can produce',
        title='outputs',
    )
    classification: Optional[str] = Field(
        None, description='Type, eg is Weapon, is Potion', title='classification'
    )
    categories: Optional[List[str]] = Field(
        None, description='eg 1. Melee, 2. Sword', title='categories'
    )
    variables: Optional[List[Variable9]] = Field(None, title='variables')


class LinkedProductItem9(BaseModel):
    productId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sku: Optional[str] = None
    category: Optional[str] = None
    name: Optional[str] = None
    brand: Optional[str] = None
    variant: Optional[str] = None
    quantity: Optional[float] = None
    price: Optional[float] = None
    currency: Optional[str] = None
    imageUri: Optional[str] = None
    uri: Optional[str] = None


class IntegrationEvent(BaseModel):
    type: Type27 = Field(
        ...,
        description='Event TypeDescribes the body of the IntegrationEventType',
        title='IntegrationEventType',
    )
    version: Optional[str] = Field(
        '$LATEST',
        description='The Version reference type (Semver). The type that is used to refer to the eventing version',
    )
    eventId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    appId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    playerId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sessionId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    doTrack: Optional[bool] = True
    expiresAt: Optional[int] = None
    receivedAt: Optional[int] = None
    sentAt: Optional[int] = None
    timestamp: Optional[int] = None
    eventSinceAppstart: Optional[int] = Field(
        0, description='event since app start, 0 if N/A'
    )
    sourceContext: Optional[SourceContext9] = Field(
        None,
        description='Event Source Context record. The Meta Context of the Source for the Eventing payload origins',
        title='EventSourceContextSchema',
    )
    value: Value9 = Field(
        ..., description='The Value Event class', title='The Value payload'
    )
    linkedAssets: Optional[List[LinkedAsset9]] = Field(
        None,
        description='Event Linked Assets. The list of linked assets that are associated with this event',
        title='linkedAssets',
    )
    linkedProduct: Optional[List[LinkedProductItem9]] = Field(
        None,
        description='Event Linked Product. The list of linked Product that are associated with this event',
        title='linkedProduct',
    )


class Type30(Enum):
    CampaignNew = 'CampaignNew'
    CampaignStart = 'CampaignStart'
    CampaignStop = 'CampaignStop'
    CampaignResult = 'CampaignResult'
    CampaignBounced = 'CampaignBounced'


class App10(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    build: Optional[str] = None
    namespace: Optional[str] = None


class Campaign10(BaseModel):
    name: Optional[str] = None
    affiliate: Optional[str] = None
    provider: Optional[str] = None
    source: Optional[str] = None
    medium: Optional[str] = None
    term: Optional[str] = None
    contentId: Optional[str] = None
    contentType: Optional[str] = None
    creativeUri: Optional[str] = None
    marketingTactic: Optional[str] = None
    group: Optional[str] = None
    uri: Optional[str] = None
    eCPM: Optional[float] = None
    idfv: Optional[str] = None


class Screen10(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None
    density: Optional[float] = None


class Location10(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    continent: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed: Optional[float] = None


class Device10(BaseModel):
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    fullScreen: Optional[bool] = None
    adTrackingEnabled: Optional[bool] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    name: Optional[str] = None
    osName: Optional[str] = None
    osType: Optional[str] = None
    osVersion: Optional[str] = None
    jailbroken: Optional[bool] = None
    token: Optional[str] = None
    ip: Optional[str] = None
    userAgent: Optional[str] = None
    engine: Optional[str] = None
    engineVersion: Optional[str] = None
    client: Optional[str] = None
    locale: Optional[str] = None
    bluetooth: Optional[bool] = None
    carrier: Optional[str] = None
    cellular: Optional[bool] = None
    wifi: Optional[bool] = None
    screen: Optional[Screen10] = Field(
        None,
        description='The Device Screen. The Device Specific Screen properties',
        title='screen',
    )
    location: Optional[Location10] = Field(
        None,
        description='The Device Location. The Device Location meta context',
        title='location',
    )


class Source10(BaseModel):
    worldId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    realmId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    serverId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    shardId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    method: Optional[str] = None
    path: Optional[str] = None
    referrer: Optional[str] = None
    search: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    environment: Optional[str] = None


class Experiment10(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    group: Optional[str] = None
    variation: Optional[str] = None
    uri: Optional[str] = None


class Session10(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    theme: Optional[str] = None
    genre: Optional[str] = None
    level: Optional[float] = None
    progress: Optional[float] = None
    difficulty: Optional[float] = None


class Profile10(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class TargetProfile10(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class Map10(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    level: Optional[float] = None
    position: Optional[float] = None


class SourceContext10(BaseModel):
    app: Optional[App10] = Field(
        None,
        description='The App Context. The App Specific Meta Context',
        title='AppContext',
    )
    campaign: Optional[Campaign10] = Field(
        None,
        description='The Campaign Context. The Campaign Specific Meta Context',
        title='CampaignContext',
    )
    device: Optional[Device10] = Field(
        None,
        description='The Device Context. The Device Specific Meta Context',
        title='DeviceContext',
    )
    source: Optional[Source10] = Field(
        None,
        description='The Source Context. The Eventing Source Meta Context',
        title='SourceContext',
    )
    experiment: Optional[Experiment10] = Field(
        None,
        description='The Experiment Context. The Experiment Specific Meta Context',
        title='ExperimentContext',
    )
    session: Optional[Session10] = Field(
        None,
        description='The Session Context. The Session Specific Meta Context that describes missions, challenges, levels and other session-based experiences',
        title='SessionContext',
    )
    profile: Optional[Profile10] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    targetProfile: Optional[TargetProfile10] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    map: Optional[Map10] = Field(
        None,
        description='The Map Context. The Map Specific Meta Context that describes the in-game area and location',
        title='MapContext',
    )


class Identity10(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    profileId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    wallet: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    anonymous: bool
    username: Optional[str] = None
    email: Optional[str] = None
    plan: Optional[str] = None


class Content10(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class LinkedContent10(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class Prize10(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[float] = None
    level: Optional[float] = None
    amount: Optional[float] = None
    isUnique: Optional[bool] = True
    isItem: Optional[bool] = True
    isCurrency: Optional[bool] = True


class Gear10(BaseModel):
    level: Optional[float] = None
    value: Optional[float] = None
    class_: Optional[str] = Field(None, alias='class')
    isUnique: Optional[bool] = True


class TxType10(BaseModel):
    isAchievementReward: Optional[bool] = True
    isRedeem: Optional[bool] = True
    isReward: Optional[bool] = True
    isAdReward: Optional[bool] = True
    isInappPurchase: Optional[bool] = True
    isRenewal: Optional[bool] = True
    isPurchase: Optional[bool] = True
    isFXTrade: Optional[bool] = True
    isSale: Optional[bool] = True
    isTrade: Optional[bool] = True
    isDrop: Optional[bool] = True
    isLoot: Optional[bool] = True
    isGained: Optional[bool] = True
    isContract: Optional[bool] = True


class Transaction10(BaseModel):
    id: Optional[str] = None
    receipt: Optional[str] = None
    receiptSignature: Optional[str] = None
    transactorId: Optional[str] = None
    transactorName: Optional[str] = None
    transactorType: Optional[str] = None
    receiverId: Optional[str] = None
    receiverName: Optional[str] = None
    receiverType: Optional[str] = None
    network: Optional[str] = None
    checkoutId: Optional[str] = None
    orderId: Optional[str] = None
    storeId: Optional[str] = None
    storeSourceId: Optional[str] = None
    renewalCount: Optional[float] = 0
    feesTotal: Optional[float] = None
    priceTotal: Optional[float] = None
    discountTotal: Optional[float] = None
    quantity: Optional[float] = None
    amount: Optional[float] = None
    currency: Optional[str] = None
    paymentMethod: Optional[str] = None
    paymentProvider: Optional[str] = None
    virtualAmount: Optional[float] = None
    virtualCurrency: Optional[str] = None
    virtualCurrencyType: Optional[str] = None
    blob: Optional[str] = None


class Price10(BaseModel):
    amount: Optional[float] = Field(
        None, description='For either asking or bidding price'
    )
    currency: Optional[str] = None
    currencyType: Optional[str] = None


class Social10(BaseModel):
    recipient: Optional[str] = None
    sender: Optional[str] = None
    groupName: Optional[str] = None
    via: Optional[str] = None
    message: Optional[str] = None
    rating: Optional[str] = None


class Mission10(BaseModel):
    duration: Optional[float] = None
    rank: Optional[float] = None
    rankName: Optional[str] = None
    score: Optional[float] = None
    moves: Optional[float] = None
    remaining: Optional[float] = None


class Ad10(BaseModel):
    publisher: Optional[str] = None
    position: Optional[float] = None
    totalLength: Optional[float] = None
    quartile: Optional[float] = None
    placementId: Optional[str] = None
    placementName: Optional[str] = None


class Value10(BaseModel):
    identity: Optional[Identity10] = Field(
        None,
        description='The identity Value Payload. All the values to keep track of the profile and user',
        title='Identity',
    )
    content: Optional[Content10] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    linkedContent: Optional[LinkedContent10] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    prize: Optional[Prize10] = Field(
        None,
        description='The prize/rewards Value Payload. All the values for prize/rewards-based interactions',
        title='Prize',
    )
    gear: Optional[Gear10] = Field(
        None,
        description='The gear Value Payload. All the values for gear-based acquisition interactions',
        title='Gear',
    )
    txType: Optional[TxType10] = Field(
        None,
        description='The TransactionType. All the values to set what kind of transaction is it',
        title='TxType',
    )
    transaction: Optional[Transaction10] = Field(
        None,
        description='The Transaction Payload. All the values for Transaction interactions',
        title='Transaction',
    )
    price: Optional[Price10] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Price',
    )
    social: Optional[Social10] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Social',
    )
    mission: Optional[Mission10] = Field(
        None,
        description='The mission Value Payload. All the values for Mission/Quest/Level/Session/Matchmaking/Season interactions',
        title='Mission',
    )
    ad: Optional[Ad10] = Field(
        None,
        description='The Ad Value Payload. All the values for Ad interactions',
        title='Advertisement',
    )
    customRef: Optional[str] = None
    customValue: Optional[float] = None
    customMeta: Optional[Dict[str, Any]] = None


class TypeListEnum10(Enum):
    Resource = 'Resource'
    Item = 'Item'
    Craft = 'Craft'
    Input = 'Input'
    Modifier = 'Modifier'
    Profile = 'Profile'
    Character = 'Character'


class Type31(Enum):
    Probability = 'Probability'
    Quantity = 'Quantity'
    Quality = 'Quality'
    Rate = 'Rate'
    Number = 'Number'
    Percentage = 'Percentage'
    Time = 'Time'


class Type32(Enum):
    Mapping = 'Mapping'
    Leveling = 'Leveling'
    Class = 'Class'
    Time = 'Time'
    Default = 'Default'


class Variation10(BaseModel):
    type: Type32 = Field(
        ...,
        description='Variable Variation Type Whether this is a variation variable',
        title='VariableVariationType',
    )
    key: str
    value: float


class Variable10(BaseModel):
    type: Type31 = Field(
        ...,
        description='Variable Type What kind of value the variable holds',
        title='VariableType',
    )
    key: str
    value: float
    variations: Optional[List[Variation10]] = Field(
        None, description='The list of asset variations values', title='variations'
    )


class LinkedAsset10(BaseModel):
    assetId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    typeList: List[TypeListEnum10] = Field(
        ...,
        description='The list of types that the asset is associated with',
        ge=1.0,
        title='typeList',
        unique_items=True,
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset depends to, in order to be produced',
        title='inputs',
    )
    outputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset can produce',
        title='outputs',
    )
    classification: Optional[str] = Field(
        None, description='Type, eg is Weapon, is Potion', title='classification'
    )
    categories: Optional[List[str]] = Field(
        None, description='eg 1. Melee, 2. Sword', title='categories'
    )
    variables: Optional[List[Variable10]] = Field(None, title='variables')


class LinkedProductItem10(BaseModel):
    productId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sku: Optional[str] = None
    category: Optional[str] = None
    name: Optional[str] = None
    brand: Optional[str] = None
    variant: Optional[str] = None
    quantity: Optional[float] = None
    price: Optional[float] = None
    currency: Optional[str] = None
    imageUri: Optional[str] = None
    uri: Optional[str] = None


class MarketingEvent(BaseModel):
    type: Type30 = Field(
        ...,
        description='Event TypeDescribes the body of the MarketingEventType',
        title='MarketingEventType',
    )
    version: Optional[str] = Field(
        '$LATEST',
        description='The Version reference type (Semver). The type that is used to refer to the eventing version',
    )
    eventId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    appId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    playerId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sessionId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    doTrack: Optional[bool] = True
    expiresAt: Optional[int] = None
    receivedAt: Optional[int] = None
    sentAt: Optional[int] = None
    timestamp: Optional[int] = None
    eventSinceAppstart: Optional[int] = Field(
        0, description='event since app start, 0 if N/A'
    )
    sourceContext: Optional[SourceContext10] = Field(
        None,
        description='Event Source Context record. The Meta Context of the Source for the Eventing payload origins',
        title='EventSourceContextSchema',
    )
    value: Value10 = Field(
        ..., description='The Value Event class', title='The Value payload'
    )
    linkedAssets: Optional[List[LinkedAsset10]] = Field(
        None,
        description='Event Linked Assets. The list of linked assets that are associated with this event',
        title='linkedAssets',
    )
    linkedProduct: Optional[List[LinkedProductItem10]] = Field(
        None,
        description='Event Linked Product. The list of linked Product that are associated with this event',
        title='linkedProduct',
    )


class Type33(Enum):
    ResourceSupply = 'ResourceSupply'
    ResourceGeneration = 'ResourceGeneration'


class App11(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    build: Optional[str] = None
    namespace: Optional[str] = None


class Campaign11(BaseModel):
    name: Optional[str] = None
    affiliate: Optional[str] = None
    provider: Optional[str] = None
    source: Optional[str] = None
    medium: Optional[str] = None
    term: Optional[str] = None
    contentId: Optional[str] = None
    contentType: Optional[str] = None
    creativeUri: Optional[str] = None
    marketingTactic: Optional[str] = None
    group: Optional[str] = None
    uri: Optional[str] = None
    eCPM: Optional[float] = None
    idfv: Optional[str] = None


class Screen11(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None
    density: Optional[float] = None


class Location11(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    continent: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed: Optional[float] = None


class Device11(BaseModel):
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    fullScreen: Optional[bool] = None
    adTrackingEnabled: Optional[bool] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    name: Optional[str] = None
    osName: Optional[str] = None
    osType: Optional[str] = None
    osVersion: Optional[str] = None
    jailbroken: Optional[bool] = None
    token: Optional[str] = None
    ip: Optional[str] = None
    userAgent: Optional[str] = None
    engine: Optional[str] = None
    engineVersion: Optional[str] = None
    client: Optional[str] = None
    locale: Optional[str] = None
    bluetooth: Optional[bool] = None
    carrier: Optional[str] = None
    cellular: Optional[bool] = None
    wifi: Optional[bool] = None
    screen: Optional[Screen11] = Field(
        None,
        description='The Device Screen. The Device Specific Screen properties',
        title='screen',
    )
    location: Optional[Location11] = Field(
        None,
        description='The Device Location. The Device Location meta context',
        title='location',
    )


class Source11(BaseModel):
    worldId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    realmId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    serverId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    shardId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    method: Optional[str] = None
    path: Optional[str] = None
    referrer: Optional[str] = None
    search: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    environment: Optional[str] = None


class Experiment11(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    group: Optional[str] = None
    variation: Optional[str] = None
    uri: Optional[str] = None


class Session11(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    theme: Optional[str] = None
    genre: Optional[str] = None
    level: Optional[float] = None
    progress: Optional[float] = None
    difficulty: Optional[float] = None


class Profile11(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class TargetProfile11(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class Map11(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    level: Optional[float] = None
    position: Optional[float] = None


class SourceContext11(BaseModel):
    app: Optional[App11] = Field(
        None,
        description='The App Context. The App Specific Meta Context',
        title='AppContext',
    )
    campaign: Optional[Campaign11] = Field(
        None,
        description='The Campaign Context. The Campaign Specific Meta Context',
        title='CampaignContext',
    )
    device: Optional[Device11] = Field(
        None,
        description='The Device Context. The Device Specific Meta Context',
        title='DeviceContext',
    )
    source: Optional[Source11] = Field(
        None,
        description='The Source Context. The Eventing Source Meta Context',
        title='SourceContext',
    )
    experiment: Optional[Experiment11] = Field(
        None,
        description='The Experiment Context. The Experiment Specific Meta Context',
        title='ExperimentContext',
    )
    session: Optional[Session11] = Field(
        None,
        description='The Session Context. The Session Specific Meta Context that describes missions, challenges, levels and other session-based experiences',
        title='SessionContext',
    )
    profile: Optional[Profile11] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    targetProfile: Optional[TargetProfile11] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    map: Optional[Map11] = Field(
        None,
        description='The Map Context. The Map Specific Meta Context that describes the in-game area and location',
        title='MapContext',
    )


class Identity11(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    profileId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    wallet: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    anonymous: bool
    username: Optional[str] = None
    email: Optional[str] = None
    plan: Optional[str] = None


class Content11(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class LinkedContent11(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class Prize11(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[float] = None
    level: Optional[float] = None
    amount: Optional[float] = None
    isUnique: Optional[bool] = True
    isItem: Optional[bool] = True
    isCurrency: Optional[bool] = True


class Gear11(BaseModel):
    level: Optional[float] = None
    value: Optional[float] = None
    class_: Optional[str] = Field(None, alias='class')
    isUnique: Optional[bool] = True


class TxType11(BaseModel):
    isAchievementReward: Optional[bool] = True
    isRedeem: Optional[bool] = True
    isReward: Optional[bool] = True
    isAdReward: Optional[bool] = True
    isInappPurchase: Optional[bool] = True
    isRenewal: Optional[bool] = True
    isPurchase: Optional[bool] = True
    isFXTrade: Optional[bool] = True
    isSale: Optional[bool] = True
    isTrade: Optional[bool] = True
    isDrop: Optional[bool] = True
    isLoot: Optional[bool] = True
    isGained: Optional[bool] = True
    isContract: Optional[bool] = True


class Transaction11(BaseModel):
    id: Optional[str] = None
    receipt: Optional[str] = None
    receiptSignature: Optional[str] = None
    transactorId: Optional[str] = None
    transactorName: Optional[str] = None
    transactorType: Optional[str] = None
    receiverId: Optional[str] = None
    receiverName: Optional[str] = None
    receiverType: Optional[str] = None
    network: Optional[str] = None
    checkoutId: Optional[str] = None
    orderId: Optional[str] = None
    storeId: Optional[str] = None
    storeSourceId: Optional[str] = None
    renewalCount: Optional[float] = 0
    feesTotal: Optional[float] = None
    priceTotal: Optional[float] = None
    discountTotal: Optional[float] = None
    quantity: Optional[float] = None
    amount: Optional[float] = None
    currency: Optional[str] = None
    paymentMethod: Optional[str] = None
    paymentProvider: Optional[str] = None
    virtualAmount: Optional[float] = None
    virtualCurrency: Optional[str] = None
    virtualCurrencyType: Optional[str] = None
    blob: Optional[str] = None


class Price11(BaseModel):
    amount: Optional[float] = Field(
        None, description='For either asking or bidding price'
    )
    currency: Optional[str] = None
    currencyType: Optional[str] = None


class Social11(BaseModel):
    recipient: Optional[str] = None
    sender: Optional[str] = None
    groupName: Optional[str] = None
    via: Optional[str] = None
    message: Optional[str] = None
    rating: Optional[str] = None


class Mission11(BaseModel):
    duration: Optional[float] = None
    rank: Optional[float] = None
    rankName: Optional[str] = None
    score: Optional[float] = None
    moves: Optional[float] = None
    remaining: Optional[float] = None


class Ad11(BaseModel):
    publisher: Optional[str] = None
    position: Optional[float] = None
    totalLength: Optional[float] = None
    quartile: Optional[float] = None
    placementId: Optional[str] = None
    placementName: Optional[str] = None


class Value11(BaseModel):
    identity: Optional[Identity11] = Field(
        None,
        description='The identity Value Payload. All the values to keep track of the profile and user',
        title='Identity',
    )
    content: Optional[Content11] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    linkedContent: Optional[LinkedContent11] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    prize: Optional[Prize11] = Field(
        None,
        description='The prize/rewards Value Payload. All the values for prize/rewards-based interactions',
        title='Prize',
    )
    gear: Optional[Gear11] = Field(
        None,
        description='The gear Value Payload. All the values for gear-based acquisition interactions',
        title='Gear',
    )
    txType: Optional[TxType11] = Field(
        None,
        description='The TransactionType. All the values to set what kind of transaction is it',
        title='TxType',
    )
    transaction: Optional[Transaction11] = Field(
        None,
        description='The Transaction Payload. All the values for Transaction interactions',
        title='Transaction',
    )
    price: Optional[Price11] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Price',
    )
    social: Optional[Social11] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Social',
    )
    mission: Optional[Mission11] = Field(
        None,
        description='The mission Value Payload. All the values for Mission/Quest/Level/Session/Matchmaking/Season interactions',
        title='Mission',
    )
    ad: Optional[Ad11] = Field(
        None,
        description='The Ad Value Payload. All the values for Ad interactions',
        title='Advertisement',
    )
    customRef: Optional[str] = None
    customValue: Optional[float] = None
    customMeta: Optional[Dict[str, Any]] = None


class TypeListEnum11(Enum):
    Resource = 'Resource'
    Item = 'Item'
    Craft = 'Craft'
    Input = 'Input'
    Modifier = 'Modifier'
    Profile = 'Profile'
    Character = 'Character'


class Type34(Enum):
    Probability = 'Probability'
    Quantity = 'Quantity'
    Quality = 'Quality'
    Rate = 'Rate'
    Number = 'Number'
    Percentage = 'Percentage'
    Time = 'Time'


class Type35(Enum):
    Mapping = 'Mapping'
    Leveling = 'Leveling'
    Class = 'Class'
    Time = 'Time'
    Default = 'Default'


class Variation11(BaseModel):
    type: Type35 = Field(
        ...,
        description='Variable Variation Type Whether this is a variation variable',
        title='VariableVariationType',
    )
    key: str
    value: float


class Variable11(BaseModel):
    type: Type34 = Field(
        ...,
        description='Variable Type What kind of value the variable holds',
        title='VariableType',
    )
    key: str
    value: float
    variations: Optional[List[Variation11]] = Field(
        None, description='The list of asset variations values', title='variations'
    )


class LinkedAsset11(BaseModel):
    assetId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    typeList: List[TypeListEnum11] = Field(
        ...,
        description='The list of types that the asset is associated with',
        ge=1.0,
        title='typeList',
        unique_items=True,
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset depends to, in order to be produced',
        title='inputs',
    )
    outputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset can produce',
        title='outputs',
    )
    classification: Optional[str] = Field(
        None, description='Type, eg is Weapon, is Potion', title='classification'
    )
    categories: Optional[List[str]] = Field(
        None, description='eg 1. Melee, 2. Sword', title='categories'
    )
    variables: Optional[List[Variable11]] = Field(None, title='variables')


class LinkedProductItem11(BaseModel):
    productId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sku: Optional[str] = None
    category: Optional[str] = None
    name: Optional[str] = None
    brand: Optional[str] = None
    variant: Optional[str] = None
    quantity: Optional[float] = None
    price: Optional[float] = None
    currency: Optional[str] = None
    imageUri: Optional[str] = None
    uri: Optional[str] = None


class ResourceTrackingEvent(BaseModel):
    type: Type33 = Field(
        ...,
        description='Event TypeDescribes the body of the ResourceTrackingEventType',
        title='ResourceTrackingEventType',
    )
    version: Optional[str] = Field(
        '$LATEST',
        description='The Version reference type (Semver). The type that is used to refer to the eventing version',
    )
    eventId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    appId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    playerId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sessionId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    doTrack: Optional[bool] = True
    expiresAt: Optional[int] = None
    receivedAt: Optional[int] = None
    sentAt: Optional[int] = None
    timestamp: Optional[int] = None
    eventSinceAppstart: Optional[int] = Field(
        0, description='event since app start, 0 if N/A'
    )
    sourceContext: Optional[SourceContext11] = Field(
        None,
        description='Event Source Context record. The Meta Context of the Source for the Eventing payload origins',
        title='EventSourceContextSchema',
    )
    value: Value11 = Field(
        ..., description='The Value Event class', title='The Value payload'
    )
    linkedAssets: Optional[List[LinkedAsset11]] = Field(
        None,
        description='Event Linked Assets. The list of linked assets that are associated with this event',
        title='linkedAssets',
    )
    linkedProduct: Optional[List[LinkedProductItem11]] = Field(
        None,
        description='Event Linked Product. The list of linked Product that are associated with this event',
        title='linkedProduct',
    )


class Type36(Enum):
    SinkFlow = 'SinkFlow'
    SourceFlow = 'SourceFlow'


class App12(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    build: Optional[str] = None
    namespace: Optional[str] = None


class Campaign12(BaseModel):
    name: Optional[str] = None
    affiliate: Optional[str] = None
    provider: Optional[str] = None
    source: Optional[str] = None
    medium: Optional[str] = None
    term: Optional[str] = None
    contentId: Optional[str] = None
    contentType: Optional[str] = None
    creativeUri: Optional[str] = None
    marketingTactic: Optional[str] = None
    group: Optional[str] = None
    uri: Optional[str] = None
    eCPM: Optional[float] = None
    idfv: Optional[str] = None


class Screen12(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None
    density: Optional[float] = None


class Location12(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    continent: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed: Optional[float] = None


class Device12(BaseModel):
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    fullScreen: Optional[bool] = None
    adTrackingEnabled: Optional[bool] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    name: Optional[str] = None
    osName: Optional[str] = None
    osType: Optional[str] = None
    osVersion: Optional[str] = None
    jailbroken: Optional[bool] = None
    token: Optional[str] = None
    ip: Optional[str] = None
    userAgent: Optional[str] = None
    engine: Optional[str] = None
    engineVersion: Optional[str] = None
    client: Optional[str] = None
    locale: Optional[str] = None
    bluetooth: Optional[bool] = None
    carrier: Optional[str] = None
    cellular: Optional[bool] = None
    wifi: Optional[bool] = None
    screen: Optional[Screen12] = Field(
        None,
        description='The Device Screen. The Device Specific Screen properties',
        title='screen',
    )
    location: Optional[Location12] = Field(
        None,
        description='The Device Location. The Device Location meta context',
        title='location',
    )


class Source12(BaseModel):
    worldId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    realmId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    serverId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    shardId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    method: Optional[str] = None
    path: Optional[str] = None
    referrer: Optional[str] = None
    search: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    environment: Optional[str] = None


class Experiment12(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    group: Optional[str] = None
    variation: Optional[str] = None
    uri: Optional[str] = None


class Session12(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    theme: Optional[str] = None
    genre: Optional[str] = None
    level: Optional[float] = None
    progress: Optional[float] = None
    difficulty: Optional[float] = None


class Profile12(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class TargetProfile12(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class Map12(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    level: Optional[float] = None
    position: Optional[float] = None


class SourceContext12(BaseModel):
    app: Optional[App12] = Field(
        None,
        description='The App Context. The App Specific Meta Context',
        title='AppContext',
    )
    campaign: Optional[Campaign12] = Field(
        None,
        description='The Campaign Context. The Campaign Specific Meta Context',
        title='CampaignContext',
    )
    device: Optional[Device12] = Field(
        None,
        description='The Device Context. The Device Specific Meta Context',
        title='DeviceContext',
    )
    source: Optional[Source12] = Field(
        None,
        description='The Source Context. The Eventing Source Meta Context',
        title='SourceContext',
    )
    experiment: Optional[Experiment12] = Field(
        None,
        description='The Experiment Context. The Experiment Specific Meta Context',
        title='ExperimentContext',
    )
    session: Optional[Session12] = Field(
        None,
        description='The Session Context. The Session Specific Meta Context that describes missions, challenges, levels and other session-based experiences',
        title='SessionContext',
    )
    profile: Optional[Profile12] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    targetProfile: Optional[TargetProfile12] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    map: Optional[Map12] = Field(
        None,
        description='The Map Context. The Map Specific Meta Context that describes the in-game area and location',
        title='MapContext',
    )


class Identity12(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    profileId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    wallet: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    anonymous: bool
    username: Optional[str] = None
    email: Optional[str] = None
    plan: Optional[str] = None


class Content12(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class LinkedContent12(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class Prize12(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[float] = None
    level: Optional[float] = None
    amount: Optional[float] = None
    isUnique: Optional[bool] = True
    isItem: Optional[bool] = True
    isCurrency: Optional[bool] = True


class Gear12(BaseModel):
    level: Optional[float] = None
    value: Optional[float] = None
    class_: Optional[str] = Field(None, alias='class')
    isUnique: Optional[bool] = True


class TxType12(BaseModel):
    isAchievementReward: Optional[bool] = True
    isRedeem: Optional[bool] = True
    isReward: Optional[bool] = True
    isAdReward: Optional[bool] = True
    isInappPurchase: Optional[bool] = True
    isRenewal: Optional[bool] = True
    isPurchase: Optional[bool] = True
    isFXTrade: Optional[bool] = True
    isSale: Optional[bool] = True
    isTrade: Optional[bool] = True
    isDrop: Optional[bool] = True
    isLoot: Optional[bool] = True
    isGained: Optional[bool] = True
    isContract: Optional[bool] = True


class Transaction12(BaseModel):
    id: Optional[str] = None
    receipt: Optional[str] = None
    receiptSignature: Optional[str] = None
    transactorId: Optional[str] = None
    transactorName: Optional[str] = None
    transactorType: Optional[str] = None
    receiverId: Optional[str] = None
    receiverName: Optional[str] = None
    receiverType: Optional[str] = None
    network: Optional[str] = None
    checkoutId: Optional[str] = None
    orderId: Optional[str] = None
    storeId: Optional[str] = None
    storeSourceId: Optional[str] = None
    renewalCount: Optional[float] = 0
    feesTotal: Optional[float] = None
    priceTotal: Optional[float] = None
    discountTotal: Optional[float] = None
    quantity: Optional[float] = None
    amount: Optional[float] = None
    currency: Optional[str] = None
    paymentMethod: Optional[str] = None
    paymentProvider: Optional[str] = None
    virtualAmount: Optional[float] = None
    virtualCurrency: Optional[str] = None
    virtualCurrencyType: Optional[str] = None
    blob: Optional[str] = None


class Price12(BaseModel):
    amount: Optional[float] = Field(
        None, description='For either asking or bidding price'
    )
    currency: Optional[str] = None
    currencyType: Optional[str] = None


class Social12(BaseModel):
    recipient: Optional[str] = None
    sender: Optional[str] = None
    groupName: Optional[str] = None
    via: Optional[str] = None
    message: Optional[str] = None
    rating: Optional[str] = None


class Mission12(BaseModel):
    duration: Optional[float] = None
    rank: Optional[float] = None
    rankName: Optional[str] = None
    score: Optional[float] = None
    moves: Optional[float] = None
    remaining: Optional[float] = None


class Ad12(BaseModel):
    publisher: Optional[str] = None
    position: Optional[float] = None
    totalLength: Optional[float] = None
    quartile: Optional[float] = None
    placementId: Optional[str] = None
    placementName: Optional[str] = None


class Value12(BaseModel):
    identity: Optional[Identity12] = Field(
        None,
        description='The identity Value Payload. All the values to keep track of the profile and user',
        title='Identity',
    )
    content: Optional[Content12] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    linkedContent: Optional[LinkedContent12] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    prize: Optional[Prize12] = Field(
        None,
        description='The prize/rewards Value Payload. All the values for prize/rewards-based interactions',
        title='Prize',
    )
    gear: Optional[Gear12] = Field(
        None,
        description='The gear Value Payload. All the values for gear-based acquisition interactions',
        title='Gear',
    )
    txType: Optional[TxType12] = Field(
        None,
        description='The TransactionType. All the values to set what kind of transaction is it',
        title='TxType',
    )
    transaction: Optional[Transaction12] = Field(
        None,
        description='The Transaction Payload. All the values for Transaction interactions',
        title='Transaction',
    )
    price: Optional[Price12] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Price',
    )
    social: Optional[Social12] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Social',
    )
    mission: Optional[Mission12] = Field(
        None,
        description='The mission Value Payload. All the values for Mission/Quest/Level/Session/Matchmaking/Season interactions',
        title='Mission',
    )
    ad: Optional[Ad12] = Field(
        None,
        description='The Ad Value Payload. All the values for Ad interactions',
        title='Advertisement',
    )
    customRef: Optional[str] = None
    customValue: Optional[float] = None
    customMeta: Optional[Dict[str, Any]] = None


class TypeListEnum12(Enum):
    Resource = 'Resource'
    Item = 'Item'
    Craft = 'Craft'
    Input = 'Input'
    Modifier = 'Modifier'
    Profile = 'Profile'
    Character = 'Character'


class Type37(Enum):
    Probability = 'Probability'
    Quantity = 'Quantity'
    Quality = 'Quality'
    Rate = 'Rate'
    Number = 'Number'
    Percentage = 'Percentage'
    Time = 'Time'


class Type38(Enum):
    Mapping = 'Mapping'
    Leveling = 'Leveling'
    Class = 'Class'
    Time = 'Time'
    Default = 'Default'


class Variation12(BaseModel):
    type: Type38 = Field(
        ...,
        description='Variable Variation Type Whether this is a variation variable',
        title='VariableVariationType',
    )
    key: str
    value: float


class Variable12(BaseModel):
    type: Type37 = Field(
        ...,
        description='Variable Type What kind of value the variable holds',
        title='VariableType',
    )
    key: str
    value: float
    variations: Optional[List[Variation12]] = Field(
        None, description='The list of asset variations values', title='variations'
    )


class LinkedAsset12(BaseModel):
    assetId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    typeList: List[TypeListEnum12] = Field(
        ...,
        description='The list of types that the asset is associated with',
        ge=1.0,
        title='typeList',
        unique_items=True,
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset depends to, in order to be produced',
        title='inputs',
    )
    outputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset can produce',
        title='outputs',
    )
    classification: Optional[str] = Field(
        None, description='Type, eg is Weapon, is Potion', title='classification'
    )
    categories: Optional[List[str]] = Field(
        None, description='eg 1. Melee, 2. Sword', title='categories'
    )
    variables: Optional[List[Variable12]] = Field(None, title='variables')


class LinkedProductItem12(BaseModel):
    productId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sku: Optional[str] = None
    category: Optional[str] = None
    name: Optional[str] = None
    brand: Optional[str] = None
    variant: Optional[str] = None
    quantity: Optional[float] = None
    price: Optional[float] = None
    currency: Optional[str] = None
    imageUri: Optional[str] = None
    uri: Optional[str] = None


class SinkSourceFlowEvent(BaseModel):
    type: Type36 = Field(
        ...,
        description='Event TypeDescribes the body of the SinkSourceEventType',
        title='SinkSourceEventType',
    )
    version: Optional[str] = Field(
        '$LATEST',
        description='The Version reference type (Semver). The type that is used to refer to the eventing version',
    )
    eventId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    appId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    playerId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sessionId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    doTrack: Optional[bool] = True
    expiresAt: Optional[int] = None
    receivedAt: Optional[int] = None
    sentAt: Optional[int] = None
    timestamp: Optional[int] = None
    eventSinceAppstart: Optional[int] = Field(
        0, description='event since app start, 0 if N/A'
    )
    sourceContext: Optional[SourceContext12] = Field(
        None,
        description='Event Source Context record. The Meta Context of the Source for the Eventing payload origins',
        title='EventSourceContextSchema',
    )
    value: Value12 = Field(
        ..., description='The Value Event class', title='The Value payload'
    )
    linkedAssets: Optional[List[LinkedAsset12]] = Field(
        None,
        description='Event Linked Assets. The list of linked assets that are associated with this event',
        title='linkedAssets',
    )
    linkedProduct: Optional[List[LinkedProductItem12]] = Field(
        None,
        description='Event Linked Product. The list of linked Product that are associated with this event',
        title='linkedProduct',
    )


class Type39(Enum):
    Search = 'Search'
    Bookmarked = 'Bookmarked'
    Reviewed = 'Reviewed'
    Listing = 'Listing'
    Bid = 'Bid'
    Fulfillment = 'Fulfillment'
    Engagement = 'Engagement'
    Access = 'Access'
    Click = 'Click'
    View = 'View'
    Acquire = 'Acquire'
    Download = 'Download'
    Grant = 'Grant'
    Retrack = 'Retrack'
    Mint = 'Mint'
    Burn = 'Burn'
    Play = 'Play'
    Pause = 'Pause'
    Skip = 'Skip'
    Resume = 'Resume'
    VolumeUp = 'VolumeUp'
    VolumeDown = 'VolumeDown'
    SkipFwd = 'SkipFwd'
    SkipBwd = 'SkipBwd'
    Follow = 'Follow'
    Unfollow = 'Unfollow'
    Block = 'Block'
    Reply = 'Reply'
    Create = 'Create'
    Like = 'Like'
    Spectate = 'Spectate'
    Share = 'Share'
    Scroll = 'Scroll'
    MessageSent = 'MessageSent'
    MessageEngagement = 'MessageEngagement'


class App13(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    build: Optional[str] = None
    namespace: Optional[str] = None


class Campaign13(BaseModel):
    name: Optional[str] = None
    affiliate: Optional[str] = None
    provider: Optional[str] = None
    source: Optional[str] = None
    medium: Optional[str] = None
    term: Optional[str] = None
    contentId: Optional[str] = None
    contentType: Optional[str] = None
    creativeUri: Optional[str] = None
    marketingTactic: Optional[str] = None
    group: Optional[str] = None
    uri: Optional[str] = None
    eCPM: Optional[float] = None
    idfv: Optional[str] = None


class Screen13(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None
    density: Optional[float] = None


class Location13(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    continent: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed: Optional[float] = None


class Device13(BaseModel):
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    fullScreen: Optional[bool] = None
    adTrackingEnabled: Optional[bool] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    name: Optional[str] = None
    osName: Optional[str] = None
    osType: Optional[str] = None
    osVersion: Optional[str] = None
    jailbroken: Optional[bool] = None
    token: Optional[str] = None
    ip: Optional[str] = None
    userAgent: Optional[str] = None
    engine: Optional[str] = None
    engineVersion: Optional[str] = None
    client: Optional[str] = None
    locale: Optional[str] = None
    bluetooth: Optional[bool] = None
    carrier: Optional[str] = None
    cellular: Optional[bool] = None
    wifi: Optional[bool] = None
    screen: Optional[Screen13] = Field(
        None,
        description='The Device Screen. The Device Specific Screen properties',
        title='screen',
    )
    location: Optional[Location13] = Field(
        None,
        description='The Device Location. The Device Location meta context',
        title='location',
    )


class Source13(BaseModel):
    worldId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    realmId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    serverId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    shardId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    method: Optional[str] = None
    path: Optional[str] = None
    referrer: Optional[str] = None
    search: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    environment: Optional[str] = None


class Experiment13(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    group: Optional[str] = None
    variation: Optional[str] = None
    uri: Optional[str] = None


class Session13(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    theme: Optional[str] = None
    genre: Optional[str] = None
    level: Optional[float] = None
    progress: Optional[float] = None
    difficulty: Optional[float] = None


class Profile13(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class TargetProfile13(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class Map13(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    level: Optional[float] = None
    position: Optional[float] = None


class SourceContext13(BaseModel):
    app: Optional[App13] = Field(
        None,
        description='The App Context. The App Specific Meta Context',
        title='AppContext',
    )
    campaign: Optional[Campaign13] = Field(
        None,
        description='The Campaign Context. The Campaign Specific Meta Context',
        title='CampaignContext',
    )
    device: Optional[Device13] = Field(
        None,
        description='The Device Context. The Device Specific Meta Context',
        title='DeviceContext',
    )
    source: Optional[Source13] = Field(
        None,
        description='The Source Context. The Eventing Source Meta Context',
        title='SourceContext',
    )
    experiment: Optional[Experiment13] = Field(
        None,
        description='The Experiment Context. The Experiment Specific Meta Context',
        title='ExperimentContext',
    )
    session: Optional[Session13] = Field(
        None,
        description='The Session Context. The Session Specific Meta Context that describes missions, challenges, levels and other session-based experiences',
        title='SessionContext',
    )
    profile: Optional[Profile13] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    targetProfile: Optional[TargetProfile13] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    map: Optional[Map13] = Field(
        None,
        description='The Map Context. The Map Specific Meta Context that describes the in-game area and location',
        title='MapContext',
    )


class Identity13(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    profileId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    wallet: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    anonymous: bool
    username: Optional[str] = None
    email: Optional[str] = None
    plan: Optional[str] = None


class Content13(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class LinkedContent13(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class Prize13(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[float] = None
    level: Optional[float] = None
    amount: Optional[float] = None
    isUnique: Optional[bool] = True
    isItem: Optional[bool] = True
    isCurrency: Optional[bool] = True


class Gear13(BaseModel):
    level: Optional[float] = None
    value: Optional[float] = None
    class_: Optional[str] = Field(None, alias='class')
    isUnique: Optional[bool] = True


class TxType13(BaseModel):
    isAchievementReward: Optional[bool] = True
    isRedeem: Optional[bool] = True
    isReward: Optional[bool] = True
    isAdReward: Optional[bool] = True
    isInappPurchase: Optional[bool] = True
    isRenewal: Optional[bool] = True
    isPurchase: Optional[bool] = True
    isFXTrade: Optional[bool] = True
    isSale: Optional[bool] = True
    isTrade: Optional[bool] = True
    isDrop: Optional[bool] = True
    isLoot: Optional[bool] = True
    isGained: Optional[bool] = True
    isContract: Optional[bool] = True


class Transaction13(BaseModel):
    id: Optional[str] = None
    receipt: Optional[str] = None
    receiptSignature: Optional[str] = None
    transactorId: Optional[str] = None
    transactorName: Optional[str] = None
    transactorType: Optional[str] = None
    receiverId: Optional[str] = None
    receiverName: Optional[str] = None
    receiverType: Optional[str] = None
    network: Optional[str] = None
    checkoutId: Optional[str] = None
    orderId: Optional[str] = None
    storeId: Optional[str] = None
    storeSourceId: Optional[str] = None
    renewalCount: Optional[float] = 0
    feesTotal: Optional[float] = None
    priceTotal: Optional[float] = None
    discountTotal: Optional[float] = None
    quantity: Optional[float] = None
    amount: Optional[float] = None
    currency: Optional[str] = None
    paymentMethod: Optional[str] = None
    paymentProvider: Optional[str] = None
    virtualAmount: Optional[float] = None
    virtualCurrency: Optional[str] = None
    virtualCurrencyType: Optional[str] = None
    blob: Optional[str] = None


class Price13(BaseModel):
    amount: Optional[float] = Field(
        None, description='For either asking or bidding price'
    )
    currency: Optional[str] = None
    currencyType: Optional[str] = None


class Social13(BaseModel):
    recipient: Optional[str] = None
    sender: Optional[str] = None
    groupName: Optional[str] = None
    via: Optional[str] = None
    message: Optional[str] = None
    rating: Optional[str] = None


class Mission13(BaseModel):
    duration: Optional[float] = None
    rank: Optional[float] = None
    rankName: Optional[str] = None
    score: Optional[float] = None
    moves: Optional[float] = None
    remaining: Optional[float] = None


class Ad13(BaseModel):
    publisher: Optional[str] = None
    position: Optional[float] = None
    totalLength: Optional[float] = None
    quartile: Optional[float] = None
    placementId: Optional[str] = None
    placementName: Optional[str] = None


class Value13(BaseModel):
    identity: Optional[Identity13] = Field(
        None,
        description='The identity Value Payload. All the values to keep track of the profile and user',
        title='Identity',
    )
    content: Optional[Content13] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    linkedContent: Optional[LinkedContent13] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    prize: Optional[Prize13] = Field(
        None,
        description='The prize/rewards Value Payload. All the values for prize/rewards-based interactions',
        title='Prize',
    )
    gear: Optional[Gear13] = Field(
        None,
        description='The gear Value Payload. All the values for gear-based acquisition interactions',
        title='Gear',
    )
    txType: Optional[TxType13] = Field(
        None,
        description='The TransactionType. All the values to set what kind of transaction is it',
        title='TxType',
    )
    transaction: Optional[Transaction13] = Field(
        None,
        description='The Transaction Payload. All the values for Transaction interactions',
        title='Transaction',
    )
    price: Optional[Price13] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Price',
    )
    social: Optional[Social13] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Social',
    )
    mission: Optional[Mission13] = Field(
        None,
        description='The mission Value Payload. All the values for Mission/Quest/Level/Session/Matchmaking/Season interactions',
        title='Mission',
    )
    ad: Optional[Ad13] = Field(
        None,
        description='The Ad Value Payload. All the values for Ad interactions',
        title='Advertisement',
    )
    customRef: Optional[str] = None
    customValue: Optional[float] = None
    customMeta: Optional[Dict[str, Any]] = None


class TypeListEnum13(Enum):
    Resource = 'Resource'
    Item = 'Item'
    Craft = 'Craft'
    Input = 'Input'
    Modifier = 'Modifier'
    Profile = 'Profile'
    Character = 'Character'


class Type40(Enum):
    Probability = 'Probability'
    Quantity = 'Quantity'
    Quality = 'Quality'
    Rate = 'Rate'
    Number = 'Number'
    Percentage = 'Percentage'
    Time = 'Time'


class Type41(Enum):
    Mapping = 'Mapping'
    Leveling = 'Leveling'
    Class = 'Class'
    Time = 'Time'
    Default = 'Default'


class Variation13(BaseModel):
    type: Type41 = Field(
        ...,
        description='Variable Variation Type Whether this is a variation variable',
        title='VariableVariationType',
    )
    key: str
    value: float


class Variable13(BaseModel):
    type: Type40 = Field(
        ...,
        description='Variable Type What kind of value the variable holds',
        title='VariableType',
    )
    key: str
    value: float
    variations: Optional[List[Variation13]] = Field(
        None, description='The list of asset variations values', title='variations'
    )


class LinkedAsset13(BaseModel):
    assetId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    typeList: List[TypeListEnum13] = Field(
        ...,
        description='The list of types that the asset is associated with',
        ge=1.0,
        title='typeList',
        unique_items=True,
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset depends to, in order to be produced',
        title='inputs',
    )
    outputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset can produce',
        title='outputs',
    )
    classification: Optional[str] = Field(
        None, description='Type, eg is Weapon, is Potion', title='classification'
    )
    categories: Optional[List[str]] = Field(
        None, description='eg 1. Melee, 2. Sword', title='categories'
    )
    variables: Optional[List[Variable13]] = Field(None, title='variables')


class LinkedProductItem13(BaseModel):
    productId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sku: Optional[str] = None
    category: Optional[str] = None
    name: Optional[str] = None
    brand: Optional[str] = None
    variant: Optional[str] = None
    quantity: Optional[float] = None
    price: Optional[float] = None
    currency: Optional[str] = None
    imageUri: Optional[str] = None
    uri: Optional[str] = None


class SocialTrackingEvent(BaseModel):
    type: Type39 = Field(
        ...,
        description='Event TypeDescribes the body of the SocialTrackingEventType',
        title='SocialTrackingEventType',
    )
    version: Optional[str] = Field(
        '$LATEST',
        description='The Version reference type (Semver). The type that is used to refer to the eventing version',
    )
    eventId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    appId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    playerId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sessionId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    doTrack: Optional[bool] = True
    expiresAt: Optional[int] = None
    receivedAt: Optional[int] = None
    sentAt: Optional[int] = None
    timestamp: Optional[int] = None
    eventSinceAppstart: Optional[int] = Field(
        0, description='event since app start, 0 if N/A'
    )
    sourceContext: Optional[SourceContext13] = Field(
        None,
        description='Event Source Context record. The Meta Context of the Source for the Eventing payload origins',
        title='EventSourceContextSchema',
    )
    value: Value13 = Field(
        ..., description='The Value Event class', title='The Value payload'
    )
    linkedAssets: Optional[List[LinkedAsset13]] = Field(
        None,
        description='Event Linked Assets. The list of linked assets that are associated with this event',
        title='linkedAssets',
    )
    linkedProduct: Optional[List[LinkedProductItem13]] = Field(
        None,
        description='Event Linked Product. The list of linked Product that are associated with this event',
        title='linkedProduct',
    )


class Type42(Enum):
    Track = 'Track'
    Action = 'Action'
    Transaction = 'Transaction'
    Spread = 'Spread'
    Traffic = 'Traffic'
    Resource = 'Resource'
    Error = 'Error'


class App14(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    build: Optional[str] = None
    namespace: Optional[str] = None


class Campaign14(BaseModel):
    name: Optional[str] = None
    affiliate: Optional[str] = None
    provider: Optional[str] = None
    source: Optional[str] = None
    medium: Optional[str] = None
    term: Optional[str] = None
    contentId: Optional[str] = None
    contentType: Optional[str] = None
    creativeUri: Optional[str] = None
    marketingTactic: Optional[str] = None
    group: Optional[str] = None
    uri: Optional[str] = None
    eCPM: Optional[float] = None
    idfv: Optional[str] = None


class Screen14(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None
    density: Optional[float] = None


class Location14(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    continent: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed: Optional[float] = None


class Device14(BaseModel):
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    fullScreen: Optional[bool] = None
    adTrackingEnabled: Optional[bool] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    name: Optional[str] = None
    osName: Optional[str] = None
    osType: Optional[str] = None
    osVersion: Optional[str] = None
    jailbroken: Optional[bool] = None
    token: Optional[str] = None
    ip: Optional[str] = None
    userAgent: Optional[str] = None
    engine: Optional[str] = None
    engineVersion: Optional[str] = None
    client: Optional[str] = None
    locale: Optional[str] = None
    bluetooth: Optional[bool] = None
    carrier: Optional[str] = None
    cellular: Optional[bool] = None
    wifi: Optional[bool] = None
    screen: Optional[Screen14] = Field(
        None,
        description='The Device Screen. The Device Specific Screen properties',
        title='screen',
    )
    location: Optional[Location14] = Field(
        None,
        description='The Device Location. The Device Location meta context',
        title='location',
    )


class Source14(BaseModel):
    worldId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    realmId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    serverId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    shardId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    method: Optional[str] = None
    path: Optional[str] = None
    referrer: Optional[str] = None
    search: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    environment: Optional[str] = None


class Experiment14(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    group: Optional[str] = None
    variation: Optional[str] = None
    uri: Optional[str] = None


class Session14(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    theme: Optional[str] = None
    genre: Optional[str] = None
    level: Optional[float] = None
    progress: Optional[float] = None
    difficulty: Optional[float] = None


class Profile14(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class TargetProfile14(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class Map14(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    level: Optional[float] = None
    position: Optional[float] = None


class SourceContext14(BaseModel):
    app: Optional[App14] = Field(
        None,
        description='The App Context. The App Specific Meta Context',
        title='AppContext',
    )
    campaign: Optional[Campaign14] = Field(
        None,
        description='The Campaign Context. The Campaign Specific Meta Context',
        title='CampaignContext',
    )
    device: Optional[Device14] = Field(
        None,
        description='The Device Context. The Device Specific Meta Context',
        title='DeviceContext',
    )
    source: Optional[Source14] = Field(
        None,
        description='The Source Context. The Eventing Source Meta Context',
        title='SourceContext',
    )
    experiment: Optional[Experiment14] = Field(
        None,
        description='The Experiment Context. The Experiment Specific Meta Context',
        title='ExperimentContext',
    )
    session: Optional[Session14] = Field(
        None,
        description='The Session Context. The Session Specific Meta Context that describes missions, challenges, levels and other session-based experiences',
        title='SessionContext',
    )
    profile: Optional[Profile14] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    targetProfile: Optional[TargetProfile14] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    map: Optional[Map14] = Field(
        None,
        description='The Map Context. The Map Specific Meta Context that describes the in-game area and location',
        title='MapContext',
    )


class Identity14(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    profileId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    wallet: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    anonymous: bool
    username: Optional[str] = None
    email: Optional[str] = None
    plan: Optional[str] = None


class Content14(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class LinkedContent14(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class Prize14(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[float] = None
    level: Optional[float] = None
    amount: Optional[float] = None
    isUnique: Optional[bool] = True
    isItem: Optional[bool] = True
    isCurrency: Optional[bool] = True


class Gear14(BaseModel):
    level: Optional[float] = None
    value: Optional[float] = None
    class_: Optional[str] = Field(None, alias='class')
    isUnique: Optional[bool] = True


class TxType14(BaseModel):
    isAchievementReward: Optional[bool] = True
    isRedeem: Optional[bool] = True
    isReward: Optional[bool] = True
    isAdReward: Optional[bool] = True
    isInappPurchase: Optional[bool] = True
    isRenewal: Optional[bool] = True
    isPurchase: Optional[bool] = True
    isFXTrade: Optional[bool] = True
    isSale: Optional[bool] = True
    isTrade: Optional[bool] = True
    isDrop: Optional[bool] = True
    isLoot: Optional[bool] = True
    isGained: Optional[bool] = True
    isContract: Optional[bool] = True


class Transaction14(BaseModel):
    id: Optional[str] = None
    receipt: Optional[str] = None
    receiptSignature: Optional[str] = None
    transactorId: Optional[str] = None
    transactorName: Optional[str] = None
    transactorType: Optional[str] = None
    receiverId: Optional[str] = None
    receiverName: Optional[str] = None
    receiverType: Optional[str] = None
    network: Optional[str] = None
    checkoutId: Optional[str] = None
    orderId: Optional[str] = None
    storeId: Optional[str] = None
    storeSourceId: Optional[str] = None
    renewalCount: Optional[float] = 0
    feesTotal: Optional[float] = None
    priceTotal: Optional[float] = None
    discountTotal: Optional[float] = None
    quantity: Optional[float] = None
    amount: Optional[float] = None
    currency: Optional[str] = None
    paymentMethod: Optional[str] = None
    paymentProvider: Optional[str] = None
    virtualAmount: Optional[float] = None
    virtualCurrency: Optional[str] = None
    virtualCurrencyType: Optional[str] = None
    blob: Optional[str] = None


class Price14(BaseModel):
    amount: Optional[float] = Field(
        None, description='For either asking or bidding price'
    )
    currency: Optional[str] = None
    currencyType: Optional[str] = None


class Social14(BaseModel):
    recipient: Optional[str] = None
    sender: Optional[str] = None
    groupName: Optional[str] = None
    via: Optional[str] = None
    message: Optional[str] = None
    rating: Optional[str] = None


class Mission14(BaseModel):
    duration: Optional[float] = None
    rank: Optional[float] = None
    rankName: Optional[str] = None
    score: Optional[float] = None
    moves: Optional[float] = None
    remaining: Optional[float] = None


class Ad14(BaseModel):
    publisher: Optional[str] = None
    position: Optional[float] = None
    totalLength: Optional[float] = None
    quartile: Optional[float] = None
    placementId: Optional[str] = None
    placementName: Optional[str] = None


class Value14(BaseModel):
    identity: Optional[Identity14] = Field(
        None,
        description='The identity Value Payload. All the values to keep track of the profile and user',
        title='Identity',
    )
    content: Optional[Content14] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    linkedContent: Optional[LinkedContent14] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    prize: Optional[Prize14] = Field(
        None,
        description='The prize/rewards Value Payload. All the values for prize/rewards-based interactions',
        title='Prize',
    )
    gear: Optional[Gear14] = Field(
        None,
        description='The gear Value Payload. All the values for gear-based acquisition interactions',
        title='Gear',
    )
    txType: Optional[TxType14] = Field(
        None,
        description='The TransactionType. All the values to set what kind of transaction is it',
        title='TxType',
    )
    transaction: Optional[Transaction14] = Field(
        None,
        description='The Transaction Payload. All the values for Transaction interactions',
        title='Transaction',
    )
    price: Optional[Price14] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Price',
    )
    social: Optional[Social14] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Social',
    )
    mission: Optional[Mission14] = Field(
        None,
        description='The mission Value Payload. All the values for Mission/Quest/Level/Session/Matchmaking/Season interactions',
        title='Mission',
    )
    ad: Optional[Ad14] = Field(
        None,
        description='The Ad Value Payload. All the values for Ad interactions',
        title='Advertisement',
    )
    customRef: Optional[str] = None
    customValue: Optional[float] = None
    customMeta: Optional[Dict[str, Any]] = None


class TypeListEnum14(Enum):
    Resource = 'Resource'
    Item = 'Item'
    Craft = 'Craft'
    Input = 'Input'
    Modifier = 'Modifier'
    Profile = 'Profile'
    Character = 'Character'


class Type43(Enum):
    Probability = 'Probability'
    Quantity = 'Quantity'
    Quality = 'Quality'
    Rate = 'Rate'
    Number = 'Number'
    Percentage = 'Percentage'
    Time = 'Time'


class Type44(Enum):
    Mapping = 'Mapping'
    Leveling = 'Leveling'
    Class = 'Class'
    Time = 'Time'
    Default = 'Default'


class Variation14(BaseModel):
    type: Type44 = Field(
        ...,
        description='Variable Variation Type Whether this is a variation variable',
        title='VariableVariationType',
    )
    key: str
    value: float


class Variable14(BaseModel):
    type: Type43 = Field(
        ...,
        description='Variable Type What kind of value the variable holds',
        title='VariableType',
    )
    key: str
    value: float
    variations: Optional[List[Variation14]] = Field(
        None, description='The list of asset variations values', title='variations'
    )


class LinkedAsset14(BaseModel):
    assetId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    typeList: List[TypeListEnum14] = Field(
        ...,
        description='The list of types that the asset is associated with',
        ge=1.0,
        title='typeList',
        unique_items=True,
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset depends to, in order to be produced',
        title='inputs',
    )
    outputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset can produce',
        title='outputs',
    )
    classification: Optional[str] = Field(
        None, description='Type, eg is Weapon, is Potion', title='classification'
    )
    categories: Optional[List[str]] = Field(
        None, description='eg 1. Melee, 2. Sword', title='categories'
    )
    variables: Optional[List[Variable14]] = Field(None, title='variables')


class LinkedProductItem14(BaseModel):
    productId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sku: Optional[str] = None
    category: Optional[str] = None
    name: Optional[str] = None
    brand: Optional[str] = None
    variant: Optional[str] = None
    quantity: Optional[float] = None
    price: Optional[float] = None
    currency: Optional[str] = None
    imageUri: Optional[str] = None
    uri: Optional[str] = None


class TrackingEvent(BaseModel):
    type: Type42 = Field(
        ...,
        description='Event TypeDescribes the body of the TrackingEventType',
        title='TrackingEventType',
    )
    version: Optional[str] = Field(
        '$LATEST',
        description='The Version reference type (Semver). The type that is used to refer to the eventing version',
    )
    eventId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    appId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    playerId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sessionId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    doTrack: Optional[bool] = True
    expiresAt: Optional[int] = None
    receivedAt: Optional[int] = None
    sentAt: Optional[int] = None
    timestamp: Optional[int] = None
    eventSinceAppstart: Optional[int] = Field(
        0, description='event since app start, 0 if N/A'
    )
    sourceContext: Optional[SourceContext14] = Field(
        None,
        description='Event Source Context record. The Meta Context of the Source for the Eventing payload origins',
        title='EventSourceContextSchema',
    )
    value: Value14 = Field(
        ..., description='The Value Event class', title='The Value payload'
    )
    linkedAssets: Optional[List[LinkedAsset14]] = Field(
        None,
        description='Event Linked Assets. The list of linked assets that are associated with this event',
        title='linkedAssets',
    )
    linkedProduct: Optional[List[LinkedProductItem14]] = Field(
        None,
        description='Event Linked Product. The list of linked Product that are associated with this event',
        title='linkedProduct',
    )


class Type45(Enum):
    AdStarted = 'AdStarted'
    AdOpened = 'AdOpened'
    AdPlaying = 'AdPlaying'
    AdStoped = 'AdStoped'
    AdSkipped = 'AdSkipped'
    Conversion = 'Conversion'
    AdCompleted = 'AdCompleted'
    AdStop = 'AdStop'
    AdClosed = 'AdClosed'
    AdImpression = 'AdImpression'
    AdExposure = 'AdExposure'
    AdReward = 'AdReward'
    AppOpenedEvent = 'AppOpenedEvent'
    AppStart = 'AppStart'
    AppRunning = 'AppRunning'
    AppStop = 'AppStop'
    AppUpdate = 'AppUpdate'
    AppInstall = 'AppInstall'
    GameStarted = 'GameStarted'
    GameEnded = 'GameEnded'
    GameRunning = 'GameRunning'
    Checkout = 'Checkout'
    Purchase = 'Purchase'
    Payment = 'Payment'
    Order = 'Order'
    Exchange = 'Exchange'
    Subscription = 'Subscription'
    RevenueRecord = 'RevenueRecord'
    Reward = 'Reward'
    Debit = 'Debit'
    Credit = 'Credit'
    SubscriptionCancel = 'SubscriptionCancel'
    ProgressionStart = 'ProgressionStart'
    ProgressionComplete = 'ProgressionComplete'
    ProgressionFail = 'ProgressionFail'
    Identity = 'Identity'
    DeviceInfo = 'DeviceInfo'
    NewUser = 'NewUser'
    NewPlayer = 'NewPlayer'
    DDNADontTrack = 'DDNADontTrack'
    Login = 'Login'
    Register = 'Register'
    KYCPass = 'KYCPass'
    Validated = 'Validated'
    Alias = 'Alias'
    Achievement = 'Achievement'
    LevelUp = 'LevelUp'
    Experience = 'Experience'
    Win = 'Win'
    Draw = 'Draw'
    Defeat = 'Defeat'
    Kill = 'Kill'
    Killed = 'Killed'
    Drop = 'Drop'
    Loot = 'Loot'
    HighScore = 'HighScore'
    Build = 'Build'
    Waging = 'Waging'
    Lock = 'Lock'
    Lose = 'Lose'
    Supply = 'Supply'
    Craft = 'Craft'
    Respawn = 'Respawn'
    Spawn = 'Spawn'
    Gathering = 'Gathering'
    Resistance = 'Resistance'
    Gear = 'Gear'
    MapAreaVisit = 'MapAreaVisit'
    MapAreaLeave = 'MapAreaLeave'
    Summon = 'Summon'
    Cast = 'Cast'
    Evolved = 'Evolved'
    SessionNew = 'SessionNew'
    SessionStart = 'SessionStart'
    SessionStop = 'SessionStop'
    SessionResult = 'SessionResult'
    SessionRank = 'SessionRank'
    SessionQuit = 'SessionQuit'
    SessionFail = 'SessionFail'
    SessionSkip = 'SessionSkip'
    MissionNew = 'MissionNew'
    MissionStart = 'MissionStart'
    MissionStop = 'MissionStop'
    MissionResult = 'MissionResult'
    MissionRank = 'MissionRank'
    MissionQuit = 'MissionQuit'
    MissionFail = 'MissionFail'
    MissionSkip = 'MissionSkip'
    QuestNew = 'QuestNew'
    QuestStart = 'QuestStart'
    QuestStop = 'QuestStop'
    QuestResult = 'QuestResult'
    QuestRank = 'QuestRank'
    QuestQuit = 'QuestQuit'
    QuestFail = 'QuestFail'
    QuestSkip = 'QuestSkip'
    LevelNew = 'LevelNew'
    LevelStart = 'LevelStart'
    LevelStop = 'LevelStop'
    LevelResult = 'LevelResult'
    LevelRank = 'LevelRank'
    LevelQuit = 'LevelQuit'
    LevelFail = 'LevelFail'
    LevelSkip = 'LevelSkip'
    SeasonNew = 'SeasonNew'
    SeasonStart = 'SeasonStart'
    SeasonStop = 'SeasonStop'
    SeasonResult = 'SeasonResult'
    SeasonRank = 'SeasonRank'
    SeasonQuit = 'SeasonQuit'
    SeasonFail = 'SeasonFail'
    SeasonSkip = 'SeasonSkip'
    MatchmakingNew = 'MatchmakingNew'
    MatchmakingStart = 'MatchmakingStart'
    MatchmakingStop = 'MatchmakingStop'
    MatchmakingResult = 'MatchmakingResult'
    MatchmakingRank = 'MatchmakingRank'
    MatchmakingQuit = 'MatchmakingQuit'
    MatchmakingFail = 'MatchmakingFail'
    MatchmakingSkip = 'MatchmakingSkip'
    ConversationNew = 'ConversationNew'
    ConversationJoin = 'ConversationJoin'
    ConversationLeave = 'ConversationLeave'
    ConversationMsgSent = 'ConversationMsgSent'
    ChannelNew = 'ChannelNew'
    ChannelJoin = 'ChannelJoin'
    ChannelLeave = 'ChannelLeave'
    ChannelMsgSent = 'ChannelMsgSent'
    GuildNew = 'GuildNew'
    GuildJoin = 'GuildJoin'
    GuildLeave = 'GuildLeave'
    GuildMsgSent = 'GuildMsgSent'
    GroupNew = 'GroupNew'
    GroupJoin = 'GroupJoin'
    GroupLeave = 'GroupLeave'
    GroupMsgSent = 'GroupMsgSent'
    PartyNew = 'PartyNew'
    PartyJoin = 'PartyJoin'
    PartyLeave = 'PartyLeave'
    PartyMsgSent = 'PartyMsgSent'
    StoreOpened = 'StoreOpened'
    StoreItemClick = 'StoreItemClick'
    ItemAcquired = 'ItemAcquired'
    ItemSpent = 'ItemSpent'
    ChampionAcquired = 'ChampionAcquired'
    SkinAcquired = 'SkinAcquired'
    VariationAcquired = 'VariationAcquired'
    Connect = 'Connect'
    Deploy = 'Deploy'
    Stream = 'Stream'
    CampaignNew = 'CampaignNew'
    CampaignStart = 'CampaignStart'
    CampaignStop = 'CampaignStop'
    CampaignResult = 'CampaignResult'
    CampaignBounced = 'CampaignBounced'
    ResourceSupply = 'ResourceSupply'
    ResourceGeneration = 'ResourceGeneration'
    SinkFlow = 'SinkFlow'
    SourceFlow = 'SourceFlow'
    Search = 'Search'
    Bookmarked = 'Bookmarked'
    Reviewed = 'Reviewed'
    Listing = 'Listing'
    Bid = 'Bid'
    Fulfillment = 'Fulfillment'
    Engagement = 'Engagement'
    Access = 'Access'
    Click = 'Click'
    View = 'View'
    Acquire = 'Acquire'
    Download = 'Download'
    Grant = 'Grant'
    Retrack = 'Retrack'
    Mint = 'Mint'
    Burn = 'Burn'
    Play = 'Play'
    Pause = 'Pause'
    Skip = 'Skip'
    Resume = 'Resume'
    VolumeUp = 'VolumeUp'
    VolumeDown = 'VolumeDown'
    SkipFwd = 'SkipFwd'
    SkipBwd = 'SkipBwd'
    Follow = 'Follow'
    Unfollow = 'Unfollow'
    Block = 'Block'
    Reply = 'Reply'
    Create = 'Create'
    Like = 'Like'
    Spectate = 'Spectate'
    Share = 'Share'
    Scroll = 'Scroll'
    MessageSent = 'MessageSent'
    MessageEngagement = 'MessageEngagement'
    Track = 'Track'
    Action = 'Action'
    Transaction = 'Transaction'
    Spread = 'Spread'
    Traffic = 'Traffic'
    Resource = 'Resource'
    Error = 'Error'
    Debug = 'Debug'
    Custom = 'Custom'


class App15(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    build: Optional[str] = None
    namespace: Optional[str] = None


class Campaign15(BaseModel):
    name: Optional[str] = None
    affiliate: Optional[str] = None
    provider: Optional[str] = None
    source: Optional[str] = None
    medium: Optional[str] = None
    term: Optional[str] = None
    contentId: Optional[str] = None
    contentType: Optional[str] = None
    creativeUri: Optional[str] = None
    marketingTactic: Optional[str] = None
    group: Optional[str] = None
    uri: Optional[str] = None
    eCPM: Optional[float] = None
    idfv: Optional[str] = None


class Screen15(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None
    density: Optional[float] = None


class Location15(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    continent: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed: Optional[float] = None


class Device15(BaseModel):
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    fullScreen: Optional[bool] = None
    adTrackingEnabled: Optional[bool] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    name: Optional[str] = None
    osName: Optional[str] = None
    osType: Optional[str] = None
    osVersion: Optional[str] = None
    jailbroken: Optional[bool] = None
    token: Optional[str] = None
    ip: Optional[str] = None
    userAgent: Optional[str] = None
    engine: Optional[str] = None
    engineVersion: Optional[str] = None
    client: Optional[str] = None
    locale: Optional[str] = None
    bluetooth: Optional[bool] = None
    carrier: Optional[str] = None
    cellular: Optional[bool] = None
    wifi: Optional[bool] = None
    screen: Optional[Screen15] = Field(
        None,
        description='The Device Screen. The Device Specific Screen properties',
        title='screen',
    )
    location: Optional[Location15] = Field(
        None,
        description='The Device Location. The Device Location meta context',
        title='location',
    )


class Source15(BaseModel):
    worldId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    realmId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    serverId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    shardId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    method: Optional[str] = None
    path: Optional[str] = None
    referrer: Optional[str] = None
    search: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    environment: Optional[str] = None


class Experiment15(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    group: Optional[str] = None
    variation: Optional[str] = None
    uri: Optional[str] = None


class Session15(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    theme: Optional[str] = None
    genre: Optional[str] = None
    level: Optional[float] = None
    progress: Optional[float] = None
    difficulty: Optional[float] = None


class Profile15(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class TargetProfile15(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    xp: Optional[float] = None
    champion: Optional[str] = None
    skin: Optional[str] = None
    isPremium: Optional[bool] = None
    class_: Optional[str] = Field(None, alias='class')
    subclass: Optional[str] = None
    race: Optional[str] = None
    mastery: Optional[str] = None
    groupId: Optional[str] = None
    guildId: Optional[str] = None
    teamId: Optional[str] = None
    partyId: Optional[str] = None
    factionId: Optional[str] = None
    channelId: Optional[str] = None


class Map15(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    name: Optional[str] = None
    level: Optional[float] = None
    position: Optional[float] = None


class SourceContext15(BaseModel):
    app: Optional[App15] = Field(
        None,
        description='The App Context. The App Specific Meta Context',
        title='AppContext',
    )
    campaign: Optional[Campaign15] = Field(
        None,
        description='The Campaign Context. The Campaign Specific Meta Context',
        title='CampaignContext',
    )
    device: Optional[Device15] = Field(
        None,
        description='The Device Context. The Device Specific Meta Context',
        title='DeviceContext',
    )
    source: Optional[Source15] = Field(
        None,
        description='The Source Context. The Eventing Source Meta Context',
        title='SourceContext',
    )
    experiment: Optional[Experiment15] = Field(
        None,
        description='The Experiment Context. The Experiment Specific Meta Context',
        title='ExperimentContext',
    )
    session: Optional[Session15] = Field(
        None,
        description='The Session Context. The Session Specific Meta Context that describes missions, challenges, levels and other session-based experiences',
        title='SessionContext',
    )
    profile: Optional[Profile15] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    targetProfile: Optional[TargetProfile15] = Field(
        None,
        description='The Profile Context. The Profile Specific Meta Context that describes the in-game avatar/profile',
        title='ProfileContext',
    )
    map: Optional[Map15] = Field(
        None,
        description='The Map Context. The Map Specific Meta Context that describes the in-game area and location',
        title='MapContext',
    )


class Identity15(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    profileId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    wallet: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    anonymous: bool
    username: Optional[str] = None
    email: Optional[str] = None
    plan: Optional[str] = None


class Content15(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class LinkedContent15(BaseModel):
    key: Optional[str] = None
    title: Optional[str] = None
    term: Optional[str] = None
    count: Optional[float] = None
    uri: Optional[str] = None
    isIPFS: Optional[bool] = True


class Prize15(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[float] = None
    level: Optional[float] = None
    amount: Optional[float] = None
    isUnique: Optional[bool] = True
    isItem: Optional[bool] = True
    isCurrency: Optional[bool] = True


class Gear15(BaseModel):
    level: Optional[float] = None
    value: Optional[float] = None
    class_: Optional[str] = Field(None, alias='class')
    isUnique: Optional[bool] = True


class TxType15(BaseModel):
    isAchievementReward: Optional[bool] = True
    isRedeem: Optional[bool] = True
    isReward: Optional[bool] = True
    isAdReward: Optional[bool] = True
    isInappPurchase: Optional[bool] = True
    isRenewal: Optional[bool] = True
    isPurchase: Optional[bool] = True
    isFXTrade: Optional[bool] = True
    isSale: Optional[bool] = True
    isTrade: Optional[bool] = True
    isDrop: Optional[bool] = True
    isLoot: Optional[bool] = True
    isGained: Optional[bool] = True
    isContract: Optional[bool] = True


class Transaction15(BaseModel):
    id: Optional[str] = None
    receipt: Optional[str] = None
    receiptSignature: Optional[str] = None
    transactorId: Optional[str] = None
    transactorName: Optional[str] = None
    transactorType: Optional[str] = None
    receiverId: Optional[str] = None
    receiverName: Optional[str] = None
    receiverType: Optional[str] = None
    network: Optional[str] = None
    checkoutId: Optional[str] = None
    orderId: Optional[str] = None
    storeId: Optional[str] = None
    storeSourceId: Optional[str] = None
    renewalCount: Optional[float] = 0
    feesTotal: Optional[float] = None
    priceTotal: Optional[float] = None
    discountTotal: Optional[float] = None
    quantity: Optional[float] = None
    amount: Optional[float] = None
    currency: Optional[str] = None
    paymentMethod: Optional[str] = None
    paymentProvider: Optional[str] = None
    virtualAmount: Optional[float] = None
    virtualCurrency: Optional[str] = None
    virtualCurrencyType: Optional[str] = None
    blob: Optional[str] = None


class Price15(BaseModel):
    amount: Optional[float] = Field(
        None, description='For either asking or bidding price'
    )
    currency: Optional[str] = None
    currencyType: Optional[str] = None


class Social15(BaseModel):
    recipient: Optional[str] = None
    sender: Optional[str] = None
    groupName: Optional[str] = None
    via: Optional[str] = None
    message: Optional[str] = None
    rating: Optional[str] = None


class Mission15(BaseModel):
    duration: Optional[float] = None
    rank: Optional[float] = None
    rankName: Optional[str] = None
    score: Optional[float] = None
    moves: Optional[float] = None
    remaining: Optional[float] = None


class Ad15(BaseModel):
    publisher: Optional[str] = None
    position: Optional[float] = None
    totalLength: Optional[float] = None
    quartile: Optional[float] = None
    placementId: Optional[str] = None
    placementName: Optional[str] = None


class Value15(BaseModel):
    identity: Optional[Identity15] = Field(
        None,
        description='The identity Value Payload. All the values to keep track of the profile and user',
        title='Identity',
    )
    content: Optional[Content15] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    linkedContent: Optional[LinkedContent15] = Field(
        None,
        description='The Content Value Payload. All the values for content-based interactions',
        title='Content',
    )
    prize: Optional[Prize15] = Field(
        None,
        description='The prize/rewards Value Payload. All the values for prize/rewards-based interactions',
        title='Prize',
    )
    gear: Optional[Gear15] = Field(
        None,
        description='The gear Value Payload. All the values for gear-based acquisition interactions',
        title='Gear',
    )
    txType: Optional[TxType15] = Field(
        None,
        description='The TransactionType. All the values to set what kind of transaction is it',
        title='TxType',
    )
    transaction: Optional[Transaction15] = Field(
        None,
        description='The Transaction Payload. All the values for Transaction interactions',
        title='Transaction',
    )
    price: Optional[Price15] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Price',
    )
    social: Optional[Social15] = Field(
        None,
        description='The price Value Payload. All the values for price-based asking, listing & biding interactions',
        title='Social',
    )
    mission: Optional[Mission15] = Field(
        None,
        description='The mission Value Payload. All the values for Mission/Quest/Level/Session/Matchmaking/Season interactions',
        title='Mission',
    )
    ad: Optional[Ad15] = Field(
        None,
        description='The Ad Value Payload. All the values for Ad interactions',
        title='Advertisement',
    )
    customRef: Optional[str] = None
    customValue: Optional[float] = None
    customMeta: Optional[Dict[str, Any]] = None


class TypeListEnum15(Enum):
    Resource = 'Resource'
    Item = 'Item'
    Craft = 'Craft'
    Input = 'Input'
    Modifier = 'Modifier'
    Profile = 'Profile'
    Character = 'Character'


class Type46(Enum):
    Probability = 'Probability'
    Quantity = 'Quantity'
    Quality = 'Quality'
    Rate = 'Rate'
    Number = 'Number'
    Percentage = 'Percentage'
    Time = 'Time'


class Type47(Enum):
    Mapping = 'Mapping'
    Leveling = 'Leveling'
    Class = 'Class'
    Time = 'Time'
    Default = 'Default'


class Variation15(BaseModel):
    type: Type47 = Field(
        ...,
        description='Variable Variation Type Whether this is a variation variable',
        title='VariableVariationType',
    )
    key: str
    value: float


class Variable15(BaseModel):
    type: Type46 = Field(
        ...,
        description='Variable Type What kind of value the variable holds',
        title='VariableType',
    )
    key: str
    value: float
    variations: Optional[List[Variation15]] = Field(
        None, description='The list of asset variations values', title='variations'
    )


class LinkedAsset15(BaseModel):
    assetId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    typeList: List[TypeListEnum15] = Field(
        ...,
        description='The list of types that the asset is associated with',
        ge=1.0,
        title='typeList',
        unique_items=True,
    )
    inputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset depends to, in order to be produced',
        title='inputs',
    )
    outputs: Optional[List[str]] = Field(
        None,
        description='The list of asset ids that this asset can produce',
        title='outputs',
    )
    classification: Optional[str] = Field(
        None, description='Type, eg is Weapon, is Potion', title='classification'
    )
    categories: Optional[List[str]] = Field(
        None, description='eg 1. Melee, 2. Sword', title='categories'
    )
    variables: Optional[List[Variable15]] = Field(None, title='variables')


class LinkedProductItem15(BaseModel):
    productId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sku: Optional[str] = None
    category: Optional[str] = None
    name: Optional[str] = None
    brand: Optional[str] = None
    variant: Optional[str] = None
    quantity: Optional[float] = None
    price: Optional[float] = None
    currency: Optional[str] = None
    imageUri: Optional[str] = None
    uri: Optional[str] = None


class Event(BaseModel):
    type: Type45 = Field(
        ..., description='Event TypeDescribes the body of the value', title='EventType'
    )
    version: Optional[str] = Field(
        '$LATEST',
        description='The Version reference type (Semver). The type that is used to refer to the eventing version',
    )
    eventId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    appId: str = Field(
        ...,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    userId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    installationId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    playerId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    sessionId: Optional[str] = Field(
        None,
        description='The ID (UUID) reference type, The type that is used to refer to an id of another instance in the system',
    )
    doTrack: Optional[bool] = True
    expiresAt: Optional[int] = None
    receivedAt: Optional[int] = None
    sentAt: Optional[int] = None
    timestamp: Optional[int] = None
    eventSinceAppstart: Optional[int] = Field(
        0, description='event since app start, 0 if N/A'
    )
    sourceContext: Optional[SourceContext15] = Field(
        None,
        description='Event Source Context record. The Meta Context of the Source for the Eventing payload origins',
        title='EventSourceContextSchema',
    )
    value: Value15 = Field(
        ..., description='The Value Event class', title='The Value payload'
    )
    linkedAssets: Optional[List[LinkedAsset15]] = Field(
        None,
        description='Event Linked Assets. The list of linked assets that are associated with this event',
        title='linkedAssets',
    )
    linkedProduct: Optional[List[LinkedProductItem15]] = Field(
        None,
        description='Event Linked Product. The list of linked Product that are associated with this event',
        title='linkedProduct',
    )
